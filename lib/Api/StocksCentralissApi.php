<?php
/**
 * StocksCentralissApi
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Qwenta\Fulleapps\ApiException;
use Qwenta\Fulleapps\Configuration;
use Qwenta\Fulleapps\HeaderSelector;
use Qwenta\Fulleapps\ObjectSerializer;

/**
 * StocksCentralissApi Class Doc Comment
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StocksCentralissApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation editProductStock
     *
     * Modification / Désactivation / Suppression
     *
     * @param   $body body (required)
     * @param  Int $archive 0 pour réactiver, 1 pour désactiver, 2 pour supprimer (quantity_decimal ne doit pas être renseigné pour passer en mode archivage) (required)
     * @param  Int $quantity_decimal Quantité à entrer / sortir du stock de l&#x27;article (required)
     * @param  Int $stock_type Type de mouvement de stock. 1 &#x3D; Livraison, 2 &#x3D; Facture, 3 &#x3D; Stock initial (Le stock de l&#x27;article sera réinitialisé avec la valeur envoyée) (required)
     * @param  Int $id_point_of_sale Identifiant du point de vente (associé au point de stock) (required)
     * @param  Int $id_product Identifiant du produit (required)
     * @param  Int $id_supplier Identifiant du fournisseur associé au mouvement de stock (required)
     * @param  Datetime $stock_date Date du mouvement de stock (required)
     * @param  string $comment Commentaire (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function editProductStock($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment)
    {
        $this->editProductStockWithHttpInfo($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment);
    }

    /**
     * Operation editProductStockWithHttpInfo
     *
     * Modification / Désactivation / Suppression
     *
     * @param   $body (required)
     * @param  Int $archive 0 pour réactiver, 1 pour désactiver, 2 pour supprimer (quantity_decimal ne doit pas être renseigné pour passer en mode archivage) (required)
     * @param  Int $quantity_decimal Quantité à entrer / sortir du stock de l&#x27;article (required)
     * @param  Int $stock_type Type de mouvement de stock. 1 &#x3D; Livraison, 2 &#x3D; Facture, 3 &#x3D; Stock initial (Le stock de l&#x27;article sera réinitialisé avec la valeur envoyée) (required)
     * @param  Int $id_point_of_sale Identifiant du point de vente (associé au point de stock) (required)
     * @param  Int $id_product Identifiant du produit (required)
     * @param  Int $id_supplier Identifiant du fournisseur associé au mouvement de stock (required)
     * @param  Datetime $stock_date Date du mouvement de stock (required)
     * @param  string $comment Commentaire (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function editProductStockWithHttpInfo($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment)
    {
        $returnType = '';
        $request = $this->editProductStockRequest($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation editProductStockAsync
     *
     * Modification / Désactivation / Suppression
     *
     * @param   $body (required)
     * @param  Int $archive 0 pour réactiver, 1 pour désactiver, 2 pour supprimer (quantity_decimal ne doit pas être renseigné pour passer en mode archivage) (required)
     * @param  Int $quantity_decimal Quantité à entrer / sortir du stock de l&#x27;article (required)
     * @param  Int $stock_type Type de mouvement de stock. 1 &#x3D; Livraison, 2 &#x3D; Facture, 3 &#x3D; Stock initial (Le stock de l&#x27;article sera réinitialisé avec la valeur envoyée) (required)
     * @param  Int $id_point_of_sale Identifiant du point de vente (associé au point de stock) (required)
     * @param  Int $id_product Identifiant du produit (required)
     * @param  Int $id_supplier Identifiant du fournisseur associé au mouvement de stock (required)
     * @param  Datetime $stock_date Date du mouvement de stock (required)
     * @param  string $comment Commentaire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProductStockAsync($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment)
    {
        return $this->editProductStockAsyncWithHttpInfo($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editProductStockAsyncWithHttpInfo
     *
     * Modification / Désactivation / Suppression
     *
     * @param   $body (required)
     * @param  Int $archive 0 pour réactiver, 1 pour désactiver, 2 pour supprimer (quantity_decimal ne doit pas être renseigné pour passer en mode archivage) (required)
     * @param  Int $quantity_decimal Quantité à entrer / sortir du stock de l&#x27;article (required)
     * @param  Int $stock_type Type de mouvement de stock. 1 &#x3D; Livraison, 2 &#x3D; Facture, 3 &#x3D; Stock initial (Le stock de l&#x27;article sera réinitialisé avec la valeur envoyée) (required)
     * @param  Int $id_point_of_sale Identifiant du point de vente (associé au point de stock) (required)
     * @param  Int $id_product Identifiant du produit (required)
     * @param  Int $id_supplier Identifiant du fournisseur associé au mouvement de stock (required)
     * @param  Datetime $stock_date Date du mouvement de stock (required)
     * @param  string $comment Commentaire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editProductStockAsyncWithHttpInfo($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment)
    {
        $returnType = '';
        $request = $this->editProductStockRequest($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editProductStock'
     *
     * @param   $body (required)
     * @param  Int $archive 0 pour réactiver, 1 pour désactiver, 2 pour supprimer (quantity_decimal ne doit pas être renseigné pour passer en mode archivage) (required)
     * @param  Int $quantity_decimal Quantité à entrer / sortir du stock de l&#x27;article (required)
     * @param  Int $stock_type Type de mouvement de stock. 1 &#x3D; Livraison, 2 &#x3D; Facture, 3 &#x3D; Stock initial (Le stock de l&#x27;article sera réinitialisé avec la valeur envoyée) (required)
     * @param  Int $id_point_of_sale Identifiant du point de vente (associé au point de stock) (required)
     * @param  Int $id_product Identifiant du produit (required)
     * @param  Int $id_supplier Identifiant du fournisseur associé au mouvement de stock (required)
     * @param  Datetime $stock_date Date du mouvement de stock (required)
     * @param  string $comment Commentaire (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editProductStockRequest($body, $archive, $quantity_decimal, $stock_type, $id_point_of_sale, $id_product, $id_supplier, $stock_date, $comment)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling editProductStock'
            );
        }
        // verify the required parameter 'archive' is set
        if ($archive === null || (is_array($archive) && count($archive) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $archive when calling editProductStock'
            );
        }
        // verify the required parameter 'quantity_decimal' is set
        if ($quantity_decimal === null || (is_array($quantity_decimal) && count($quantity_decimal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quantity_decimal when calling editProductStock'
            );
        }
        // verify the required parameter 'stock_type' is set
        if ($stock_type === null || (is_array($stock_type) && count($stock_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_type when calling editProductStock'
            );
        }
        // verify the required parameter 'id_point_of_sale' is set
        if ($id_point_of_sale === null || (is_array($id_point_of_sale) && count($id_point_of_sale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_point_of_sale when calling editProductStock'
            );
        }
        // verify the required parameter 'id_product' is set
        if ($id_product === null || (is_array($id_product) && count($id_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_product when calling editProductStock'
            );
        }
        // verify the required parameter 'id_supplier' is set
        if ($id_supplier === null || (is_array($id_supplier) && count($id_supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_supplier when calling editProductStock'
            );
        }
        // verify the required parameter 'stock_date' is set
        if ($stock_date === null || (is_array($stock_date) && count($stock_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stock_date when calling editProductStock'
            );
        }
        // verify the required parameter 'comment' is set
        if ($comment === null || (is_array($comment) && count($comment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment when calling editProductStock'
            );
        }

        $resourcePath = '/stocks/0';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($archive !== null) {
            $resourcePath = str_replace(
                '{' . 'archive' . '}',
                ObjectSerializer::toPathValue($archive),
                $resourcePath
            );
        }
        // path params
        if ($quantity_decimal !== null) {
            $resourcePath = str_replace(
                '{' . 'quantity_decimal' . '}',
                ObjectSerializer::toPathValue($quantity_decimal),
                $resourcePath
            );
        }
        // path params
        if ($stock_type !== null) {
            $resourcePath = str_replace(
                '{' . 'stock_type' . '}',
                ObjectSerializer::toPathValue($stock_type),
                $resourcePath
            );
        }
        // path params
        if ($id_point_of_sale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_point_of_sale' . '}',
                ObjectSerializer::toPathValue($id_point_of_sale),
                $resourcePath
            );
        }
        // path params
        if ($id_product !== null) {
            $resourcePath = str_replace(
                '{' . 'id_product' . '}',
                ObjectSerializer::toPathValue($id_product),
                $resourcePath
            );
        }
        // path params
        if ($id_supplier !== null) {
            $resourcePath = str_replace(
                '{' . 'id_supplier' . '}',
                ObjectSerializer::toPathValue($id_supplier),
                $resourcePath
            );
        }
        // path params
        if ($stock_date !== null) {
            $resourcePath = str_replace(
                '{' . 'stock_date' . '}',
                ObjectSerializer::toPathValue($stock_date),
                $resourcePath
            );
        }
        // path params
        if ($comment !== null) {
            $resourcePath = str_replace(
                '{' . 'comment' . '}',
                ObjectSerializer::toPathValue($comment),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStocks
     *
     * Récupération
     *
     * @param  int $id_product Identifiant produit (required)
     * @param  int $ids_product Identifiants produits (required)
     * @param  int $minimum 1 pour récupérer les articles en alerte stock (required)
     * @param  int $all 1 pour récupérer également les articles avec stocks désactivés (required)
     * @param  int $csv_file 1 pour récupérer le fichier csv associé (required)
     * @param  int $id_point_of_sale Identifiant du point de vente (optional)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getStocks($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale = null)
    {
        $this->getStocksWithHttpInfo($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale);
    }

    /**
     * Operation getStocksWithHttpInfo
     *
     * Récupération
     *
     * @param  int $id_product Identifiant produit (required)
     * @param  int $ids_product Identifiants produits (required)
     * @param  int $minimum 1 pour récupérer les articles en alerte stock (required)
     * @param  int $all 1 pour récupérer également les articles avec stocks désactivés (required)
     * @param  int $csv_file 1 pour récupérer le fichier csv associé (required)
     * @param  int $id_point_of_sale Identifiant du point de vente (optional)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStocksWithHttpInfo($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale = null)
    {
        $returnType = '';
        $request = $this->getStocksRequest($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getStocksAsync
     *
     * Récupération
     *
     * @param  int $id_product Identifiant produit (required)
     * @param  int $ids_product Identifiants produits (required)
     * @param  int $minimum 1 pour récupérer les articles en alerte stock (required)
     * @param  int $all 1 pour récupérer également les articles avec stocks désactivés (required)
     * @param  int $csv_file 1 pour récupérer le fichier csv associé (required)
     * @param  int $id_point_of_sale Identifiant du point de vente (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStocksAsync($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale = null)
    {
        return $this->getStocksAsyncWithHttpInfo($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStocksAsyncWithHttpInfo
     *
     * Récupération
     *
     * @param  int $id_product Identifiant produit (required)
     * @param  int $ids_product Identifiants produits (required)
     * @param  int $minimum 1 pour récupérer les articles en alerte stock (required)
     * @param  int $all 1 pour récupérer également les articles avec stocks désactivés (required)
     * @param  int $csv_file 1 pour récupérer le fichier csv associé (required)
     * @param  int $id_point_of_sale Identifiant du point de vente (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStocksAsyncWithHttpInfo($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale = null)
    {
        $returnType = '';
        $request = $this->getStocksRequest($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStocks'
     *
     * @param  int $id_product Identifiant produit (required)
     * @param  int $ids_product Identifiants produits (required)
     * @param  int $minimum 1 pour récupérer les articles en alerte stock (required)
     * @param  int $all 1 pour récupérer également les articles avec stocks désactivés (required)
     * @param  int $csv_file 1 pour récupérer le fichier csv associé (required)
     * @param  int $id_point_of_sale Identifiant du point de vente (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStocksRequest($id_product, $ids_product, $minimum, $all, $csv_file, $id_point_of_sale = null)
    {
        // verify the required parameter 'id_product' is set
        if ($id_product === null || (is_array($id_product) && count($id_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_product when calling getStocks'
            );
        }
        // verify the required parameter 'ids_product' is set
        if ($ids_product === null || (is_array($ids_product) && count($ids_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids_product when calling getStocks'
            );
        }
        // verify the required parameter 'minimum' is set
        if ($minimum === null || (is_array($minimum) && count($minimum) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $minimum when calling getStocks'
            );
        }
        // verify the required parameter 'all' is set
        if ($all === null || (is_array($all) && count($all) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $all when calling getStocks'
            );
        }
        // verify the required parameter 'csv_file' is set
        if ($csv_file === null || (is_array($csv_file) && count($csv_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $csv_file when calling getStocks'
            );
        }

        $resourcePath = '/stocks/{id_point_of_sale}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_point_of_sale !== null) {
            $queryParams['id_point_of_sale'] = ObjectSerializer::toQueryValue($id_point_of_sale, null);
        }

        // path params
        if ($id_product !== null) {
            $resourcePath = str_replace(
                '{' . 'id_product' . '}',
                ObjectSerializer::toPathValue($id_product),
                $resourcePath
            );
        }
        // path params
        if ($ids_product !== null) {
            $resourcePath = str_replace(
                '{' . 'ids_product' . '}',
                ObjectSerializer::toPathValue($ids_product),
                $resourcePath
            );
        }
        // path params
        if ($minimum !== null) {
            $resourcePath = str_replace(
                '{' . 'minimum' . '}',
                ObjectSerializer::toPathValue($minimum),
                $resourcePath
            );
        }
        // path params
        if ($all !== null) {
            $resourcePath = str_replace(
                '{' . 'all' . '}',
                ObjectSerializer::toPathValue($all),
                $resourcePath
            );
        }
        // path params
        if ($csv_file !== null) {
            $resourcePath = str_replace(
                '{' . 'csv_file' . '}',
                ObjectSerializer::toPathValue($csv_file),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStocksHistory
     *
     * Historique de stock
     *
     * @param   $ Identifiant du point de vente (required)
     * @param   $ Identifiant du produit (required)
     * @param   $ Offset (optional)
     * @param   $ Nombre d&#x27;élements à récupérer (par défaut 50) (optional)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Qwenta\Fulleapps\Model\InlineResponse2005
     */
    public function getStocksHistory($, $, $ = null, $ = null)
    {
        list($response) = $this->getStocksHistoryWithHttpInfo($, $, $, $);
        return $response;
    }

    /**
     * Operation getStocksHistoryWithHttpInfo
     *
     * Historique de stock
     *
     * @param   $ Identifiant du point de vente (required)
     * @param   $ Identifiant du produit (required)
     * @param   $ Offset (optional)
     * @param   $ Nombre d&#x27;élements à récupérer (par défaut 50) (optional)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Qwenta\Fulleapps\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStocksHistoryWithHttpInfo($, $, $ = null, $ = null)
    {
        $returnType = '\Qwenta\Fulleapps\Model\InlineResponse2005';
        $request = $this->getStocksHistoryRequest($, $, $, $);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            return [
                json_decode($responseBody->getContents(), true),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qwenta\Fulleapps\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStocksHistoryAsync
     *
     * Historique de stock
     *
     * @param   $ Identifiant du point de vente (required)
     * @param   $ Identifiant du produit (required)
     * @param   $ Offset (optional)
     * @param   $ Nombre d&#x27;élements à récupérer (par défaut 50) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStocksHistoryAsync($, $, $ = null, $ = null)
    {
        return $this->getStocksHistoryAsyncWithHttpInfo($, $, $, $)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStocksHistoryAsyncWithHttpInfo
     *
     * Historique de stock
     *
     * @param   $ Identifiant du point de vente (required)
     * @param   $ Identifiant du produit (required)
     * @param   $ Offset (optional)
     * @param   $ Nombre d&#x27;élements à récupérer (par défaut 50) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStocksHistoryAsyncWithHttpInfo($, $, $ = null, $ = null)
    {
        $returnType = '\Qwenta\Fulleapps\Model\InlineResponse2005';
        $request = $this->getStocksHistoryRequest($, $, $, $);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStocksHistory'
     *
     * @param   $ Identifiant du point de vente (required)
     * @param   $ Identifiant du produit (required)
     * @param   $ Offset (optional)
     * @param   $ Nombre d&#x27;élements à récupérer (par défaut 50) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStocksHistoryRequest($, $, $ = null, $ = null)
    {
        // verify the required parameter '' is set
        if ($ === null || (is_array($) && count($) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ when calling getStocksHistory'
            );
        }
        // verify the required parameter '' is set
        if ($ === null || (is_array($) && count($) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ when calling getStocksHistory'
            );
        }

        $resourcePath = '/stocks/history/{id_point_of_sale}/{id_product}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($, null);
        }
        // query params
        if ($ !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($, null);
        }

        // path params
        if ($ !== null) {
            $resourcePath = str_replace(
                '{' . 'id_point_of_sale' . '}',
                ObjectSerializer::toPathValue($),
                $resourcePath
            );
        }
        // path params
        if ($ !== null) {
            $resourcePath = str_replace(
                '{' . 'id_product' . '}',
                ObjectSerializer::toPathValue($),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
