<?php
/**
 * ProduitsApi
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Qwenta\Fulleapps\ApiException;
use Qwenta\Fulleapps\Configuration;
use Qwenta\Fulleapps\HeaderSelector;
use Qwenta\Fulleapps\ObjectSerializer;

/**
 * ProduitsApi Class Doc Comment
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProduitsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation get
     *
     * Récupération
     *
     * @param  int $id_rubric Récupération par rubrique de vente (Identifiant de la rubrique associée) (required)
     * @param  int $archive Récupération par niveau d&#x27;archivage (0 &#x3D; Produits actifs, 1 &#x3D; Produits archivés) (required)
     * @param  int $id_point_of_sale Récupération par point de vente (Produits actif sur le point de vente) (required)
     * @param  int $id_sale_method Récupération par mode de vente (Produits avec prix défini sur le mode de vente) (required)
     * @param  int $handle_price_period 1 pour récupérer les prix selon la période en cours (required)
     * @param  int $price_period_day Jour à utiliser pour récupérer les prix selon une période (required)
     * @param  Hour $price_period_hour Heure (HH:mm:ss) à utiliser pour récupérer les prix selon une période (required)
     * @param  float $down_fidelity_points Retourne les produits que l&#x27;on peut obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  float $up_fidelity_points Retourne les produits que l&#x27;on pourra bientot obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  string $base64 Récupération de l&#x27;image associé au produit en base64 (mini &#x3D; 72x72, small &#x3D; 128x128, medium &#x3D; 256x256, large &#x3D; 512x512) (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Qwenta\Fulleapps\Model\Product[]
     */
    public function get($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64)
    {
        list($response) = $this->getWithHttpInfo($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64);
        return $response;
    }

    /**
     * Operation getWithHttpInfo
     *
     * Récupération
     *
     * @param  int $id_rubric Récupération par rubrique de vente (Identifiant de la rubrique associée) (required)
     * @param  int $archive Récupération par niveau d&#x27;archivage (0 &#x3D; Produits actifs, 1 &#x3D; Produits archivés) (required)
     * @param  int $id_point_of_sale Récupération par point de vente (Produits actif sur le point de vente) (required)
     * @param  int $id_sale_method Récupération par mode de vente (Produits avec prix défini sur le mode de vente) (required)
     * @param  int $handle_price_period 1 pour récupérer les prix selon la période en cours (required)
     * @param  int $price_period_day Jour à utiliser pour récupérer les prix selon une période (required)
     * @param  Hour $price_period_hour Heure (HH:mm:ss) à utiliser pour récupérer les prix selon une période (required)
     * @param  float $down_fidelity_points Retourne les produits que l&#x27;on peut obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  float $up_fidelity_points Retourne les produits que l&#x27;on pourra bientot obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  string $base64 Récupération de l&#x27;image associé au produit en base64 (mini &#x3D; 72x72, small &#x3D; 128x128, medium &#x3D; 256x256, large &#x3D; 512x512) (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Qwenta\Fulleapps\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWithHttpInfo($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64)
    {
        $returnType = '\Qwenta\Fulleapps\Model\Product[]';
        $request = $this->getRequest($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qwenta\Fulleapps\Model\Product[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAsync
     *
     * Récupération
     *
     * @param  int $id_rubric Récupération par rubrique de vente (Identifiant de la rubrique associée) (required)
     * @param  int $archive Récupération par niveau d&#x27;archivage (0 &#x3D; Produits actifs, 1 &#x3D; Produits archivés) (required)
     * @param  int $id_point_of_sale Récupération par point de vente (Produits actif sur le point de vente) (required)
     * @param  int $id_sale_method Récupération par mode de vente (Produits avec prix défini sur le mode de vente) (required)
     * @param  int $handle_price_period 1 pour récupérer les prix selon la période en cours (required)
     * @param  int $price_period_day Jour à utiliser pour récupérer les prix selon une période (required)
     * @param  Hour $price_period_hour Heure (HH:mm:ss) à utiliser pour récupérer les prix selon une période (required)
     * @param  float $down_fidelity_points Retourne les produits que l&#x27;on peut obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  float $up_fidelity_points Retourne les produits que l&#x27;on pourra bientot obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  string $base64 Récupération de l&#x27;image associé au produit en base64 (mini &#x3D; 72x72, small &#x3D; 128x128, medium &#x3D; 256x256, large &#x3D; 512x512) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAsync($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64)
    {
        return $this->getAsyncWithHttpInfo($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAsyncWithHttpInfo
     *
     * Récupération
     *
     * @param  int $id_rubric Récupération par rubrique de vente (Identifiant de la rubrique associée) (required)
     * @param  int $archive Récupération par niveau d&#x27;archivage (0 &#x3D; Produits actifs, 1 &#x3D; Produits archivés) (required)
     * @param  int $id_point_of_sale Récupération par point de vente (Produits actif sur le point de vente) (required)
     * @param  int $id_sale_method Récupération par mode de vente (Produits avec prix défini sur le mode de vente) (required)
     * @param  int $handle_price_period 1 pour récupérer les prix selon la période en cours (required)
     * @param  int $price_period_day Jour à utiliser pour récupérer les prix selon une période (required)
     * @param  Hour $price_period_hour Heure (HH:mm:ss) à utiliser pour récupérer les prix selon une période (required)
     * @param  float $down_fidelity_points Retourne les produits que l&#x27;on peut obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  float $up_fidelity_points Retourne les produits que l&#x27;on pourra bientot obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  string $base64 Récupération de l&#x27;image associé au produit en base64 (mini &#x3D; 72x72, small &#x3D; 128x128, medium &#x3D; 256x256, large &#x3D; 512x512) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAsyncWithHttpInfo($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64)
    {
        $returnType = '\Qwenta\Fulleapps\Model\Product[]';
        $request = $this->getRequest($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'get'
     *
     * @param  int $id_rubric Récupération par rubrique de vente (Identifiant de la rubrique associée) (required)
     * @param  int $archive Récupération par niveau d&#x27;archivage (0 &#x3D; Produits actifs, 1 &#x3D; Produits archivés) (required)
     * @param  int $id_point_of_sale Récupération par point de vente (Produits actif sur le point de vente) (required)
     * @param  int $id_sale_method Récupération par mode de vente (Produits avec prix défini sur le mode de vente) (required)
     * @param  int $handle_price_period 1 pour récupérer les prix selon la période en cours (required)
     * @param  int $price_period_day Jour à utiliser pour récupérer les prix selon une période (required)
     * @param  Hour $price_period_hour Heure (HH:mm:ss) à utiliser pour récupérer les prix selon une période (required)
     * @param  float $down_fidelity_points Retourne les produits que l&#x27;on peut obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  float $up_fidelity_points Retourne les produits que l&#x27;on pourra bientot obtenir avec les points fidelité spécifiés (limit 30) (required)
     * @param  string $base64 Récupération de l&#x27;image associé au produit en base64 (mini &#x3D; 72x72, small &#x3D; 128x128, medium &#x3D; 256x256, large &#x3D; 512x512) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRequest($id_rubric, $archive, $id_point_of_sale, $id_sale_method, $handle_price_period, $price_period_day, $price_period_hour, $down_fidelity_points, $up_fidelity_points, $base64)
    {
        // verify the required parameter 'id_rubric' is set
        if ($id_rubric === null || (is_array($id_rubric) && count($id_rubric) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_rubric when calling get'
            );
        }
        // verify the required parameter 'archive' is set
        if ($archive === null || (is_array($archive) && count($archive) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $archive when calling get'
            );
        }
        // verify the required parameter 'id_point_of_sale' is set
        if ($id_point_of_sale === null || (is_array($id_point_of_sale) && count($id_point_of_sale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_point_of_sale when calling get'
            );
        }
        // verify the required parameter 'id_sale_method' is set
        if ($id_sale_method === null || (is_array($id_sale_method) && count($id_sale_method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_sale_method when calling get'
            );
        }
        // verify the required parameter 'handle_price_period' is set
        if ($handle_price_period === null || (is_array($handle_price_period) && count($handle_price_period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $handle_price_period when calling get'
            );
        }
        // verify the required parameter 'price_period_day' is set
        if ($price_period_day === null || (is_array($price_period_day) && count($price_period_day) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_period_day when calling get'
            );
        }
        // verify the required parameter 'price_period_hour' is set
        if ($price_period_hour === null || (is_array($price_period_hour) && count($price_period_hour) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price_period_hour when calling get'
            );
        }
        // verify the required parameter 'down_fidelity_points' is set
        if ($down_fidelity_points === null || (is_array($down_fidelity_points) && count($down_fidelity_points) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $down_fidelity_points when calling get'
            );
        }
        // verify the required parameter 'up_fidelity_points' is set
        if ($up_fidelity_points === null || (is_array($up_fidelity_points) && count($up_fidelity_points) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $up_fidelity_points when calling get'
            );
        }
        // verify the required parameter 'base64' is set
        if ($base64 === null || (is_array($base64) && count($base64) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base64 when calling get'
            );
        }

        $resourcePath = '/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_rubric !== null) {
            $resourcePath = str_replace(
                '{' . 'id_rubric' . '}',
                ObjectSerializer::toPathValue($id_rubric),
                $resourcePath
            );
        }
        // path params
        if ($archive !== null) {
            $resourcePath = str_replace(
                '{' . 'archive' . '}',
                ObjectSerializer::toPathValue($archive),
                $resourcePath
            );
        }
        // path params
        if ($id_point_of_sale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_point_of_sale' . '}',
                ObjectSerializer::toPathValue($id_point_of_sale),
                $resourcePath
            );
        }
        // path params
        if ($id_sale_method !== null) {
            $resourcePath = str_replace(
                '{' . 'id_sale_method' . '}',
                ObjectSerializer::toPathValue($id_sale_method),
                $resourcePath
            );
        }
        // path params
        if ($handle_price_period !== null) {
            $resourcePath = str_replace(
                '{' . 'handle_price_period' . '}',
                ObjectSerializer::toPathValue($handle_price_period),
                $resourcePath
            );
        }
        // path params
        if ($price_period_day !== null) {
            $resourcePath = str_replace(
                '{' . 'price_period_day' . '}',
                ObjectSerializer::toPathValue($price_period_day),
                $resourcePath
            );
        }
        // path params
        if ($price_period_hour !== null) {
            $resourcePath = str_replace(
                '{' . 'price_period_hour' . '}',
                ObjectSerializer::toPathValue($price_period_hour),
                $resourcePath
            );
        }
        // path params
        if ($down_fidelity_points !== null) {
            $resourcePath = str_replace(
                '{' . 'down_fidelity_points' . '}',
                ObjectSerializer::toPathValue($down_fidelity_points),
                $resourcePath
            );
        }
        // path params
        if ($up_fidelity_points !== null) {
            $resourcePath = str_replace(
                '{' . 'up_fidelity_points' . '}',
                ObjectSerializer::toPathValue($up_fidelity_points),
                $resourcePath
            );
        }
        // path params
        if ($base64 !== null) {
            $resourcePath = str_replace(
                '{' . 'base64' . '}',
                ObjectSerializer::toPathValue($base64),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gallery
     *
     * Gallery
     *
     * @param   $id Product ID (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Qwenta\Fulleapps\Model\InlineResponse20022
     */
    public function gallery($id)
    {
        list($response) = $this->galleryWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation galleryWithHttpInfo
     *
     * Gallery
     *
     * @param   $ Product ID (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Qwenta\Fulleapps\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
     */
    public function galleryWithHttpInfo($id)
    {
        $returnType = '\Qwenta\Fulleapps\Model\InlineResponse20022';
        $request = $this->galleryRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qwenta\Fulleapps\Model\InlineResponse20022',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation galleryAsync
     *
     * Gallery
     *
     * @param   $ Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function galleryAsync($id)
    {
        return $this->galleryAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation galleryAsyncWithHttpInfo
     *
     * Gallery
     *
     * @param   $ Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function galleryAsyncWithHttpInfo($id)
    {
        $returnType = '\Qwenta\Fulleapps\Model\InlineResponse20022';
        $request = $this->galleryRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gallery'
     *
     * @param   $ Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function galleryRequest($id)
    {
        // verify the required parameter '' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ when calling gallery'
            );
        }

        $resourcePath = '/products_gallery/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation allergensList
     *
     * Get allergens list
     *
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Qwenta\Fulleapps\Model\ProductAllergen[]
     */
    public function allergensList()
    {
        list($response) = $this->allergensListWithHttpInfo();
        return $response;
    }

    /**
     * Operation allergensListWithHttpInfo
     *
     * Get allergens list
     *
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Qwenta\Fulleapps\Model\ProductAllergen[], HTTP status code, HTTP response headers (array of strings)
     */
    public function allergensListWithHttpInfo()
    {
        $returnType = '\Qwenta\Fulleapps\Model\ProductAllergen[]';
        $request = $this->allergensListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Qwenta\Fulleapps\Model\ProductAllergen[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allergensListAsync
     *
     * Get allergens list
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allergensListAsync()
    {
        return $this->allergensListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allergensListAsyncWithHttpInfo
     *
     * Get allergens list
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allergensListAsyncWithHttpInfo()
    {
        $returnType = '\Qwenta\Fulleapps\Model\ProductAllergen[]';
        $request = $this->allergensListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allergensList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function allergensListRequest()
    {

        $resourcePath = '/product_allergens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProduct
     *
     * Création
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body body (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createProduct($body)
    {
        $this->createProductWithHttpInfo($body);
    }

    /**
     * Operation createProductWithHttpInfo
     *
     * Création
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->createProductRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createProductAsync
     *
     * Création
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAsync($body)
    {
        return $this->createProductAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProductAsyncWithHttpInfo
     *
     * Création
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProductAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->createProductRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProduct'
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProductRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createProduct'
            );
        }

        $resourcePath = '/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProduct
     *
     * Modification
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body body (required)
     * @param  int $id Identifiant du produit (optional)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateProduct($body, $id = null)
    {
        $this->updateProductWithHttpInfo($body, $id);
    }

    /**
     * Operation updateProductWithHttpInfo
     *
     * Modification
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     * @param  int $id Identifiant du produit (optional)
     *
     * @throws \Qwenta\Fulleapps\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductWithHttpInfo($body, $id = null)
    {
        $returnType = '';
        $request = $this->updateProductRequest($body, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateProductAsync
     *
     * Modification
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     * @param  int $id Identifiant du produit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductAsync($body, $id = null)
    {
        return $this->updateProductAsyncWithHttpInfo($body, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProductAsyncWithHttpInfo
     *
     * Modification
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     * @param  int $id Identifiant du produit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductAsyncWithHttpInfo($body, $id = null)
    {
        $returnType = '';
        $request = $this->updateProductRequest($body, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProduct'
     *
     * @param  \Qwenta\Fulleapps\Model\ProductC $body (required)
     * @param  int $id Identifiant du produit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProductRequest($body, $id = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateProduct'
            );
        }

        $resourcePath = '/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getApiKey('X-Api-Key')) {
            $defaultHeaders['X-Api-Key'] = $this->config->getApiKey('X-Api-Key');
        }

        if ($this->config->getApiKey('Authorization')) {
            $defaultHeaders['Authorization'] = $this->config->getApiKeyWithPrefix('Authorization');
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
