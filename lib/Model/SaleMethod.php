<?php
/**
 * SaleMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * SaleMethod Class Doc Comment
 *
 * @category Class
 * @description Class TvaRate
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaleMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SaleMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '',
        'name' => '',
        'archive' => '',
        'enable_note' => '',
        'kitchen_level' => '',
        'auto_open' => '',
        'ticket_delivery' => '',
        'enable_order' => '',
        'enable_online_order' => '',
        'enable_billing_address' => '',
        'enable_date_hour' => '',
        'enable_delivery' => '',
        'enable_shipping_cost' => '',
        'enable_online_payment' => '',
        'enable_counter_payment' => '',
        'enable_secure_counter_payment' => '',
        'minimum_order' => '',
        'limit_order_slot' => '',
        'order_slot' => '',
        'limit_order_gap' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int',
        'name' => 'string',
        'archive' => 'integer',
        'enable_note' => 'integer',
        'kitchen_level' => 'integer',
        'auto_open' => 'integer',
        'ticket_delivery' => 'integer',
        'enable_order' => 'integer',
        'enable_online_order' => 'integer',
        'enable_billing_address' => 'integer',
        'enable_date_hour' => 'integer',
        'enable_delivery' => 'integer',
        'enable_shipping_cost' => 'integer',
        'enable_online_payment' => 'integer',
        'enable_counter_payment' => 'integer',
        'enable_secure_counter_payment' => 'integer',
        'minimum_order' => 'float',
        'limit_order_slot' => 'integer',
        'order_slot' => 'integer',
        'limit_order_gap' => 'integer'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'archive' => 'archive',
        'enable_note' => 'enable_note',
        'kitchen_level' => 'kitchen_level',
        'auto_open' => 'auto_open',
        'ticket_delivery' => 'ticket_delivery',
        'enable_order' => 'enable_order',
        'enable_online_order' => 'enable_online_order',
        'enable_billing_address' => 'enable_billing_address',
        'enable_date_hour' => 'enable_date_hour',
        'enable_delivery' => 'enable_delivery',
        'enable_shipping_cost' => 'enable_shipping_cost',
        'enable_online_payment' => 'enable_online_payment',
        'enable_counter_payment' => 'enable_counter_payment',
        'enable_secure_counter_payment' => 'enable_secure_counter_payment',
        'minimum_order' => 'minimum_order',
        'limit_order_slot' => 'limit_order_slot',
        'order_slot' => 'order_slot',
        'limit_order_gap' => 'limit_order_gap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'archive' => 'setArchive',
        'enable_note' => 'setEnableNote',
        'kitchen_level' => 'setKitchenLevel',
        'auto_open' => 'setAutoOpen',
        'ticket_delivery' => 'setTicketDelivery',
        'enable_order' => 'setEnableOrder',
        'enable_online_order' => 'setEnableOnlineOrder',
        'enable_billing_address' => 'setEnableBillingAddress',
        'enable_date_hour' => 'setEnableDateHour',
        'enable_delivery' => 'setEnableDelivery',
        'enable_shipping_cost' => 'setEnableShippingCost',
        'enable_online_payment' => 'setEnableOnlinePayment',
        'enable_counter_payment' => 'setEnableCounterPayment',
        'enable_secure_counter_payment' => 'setEnableSecureCounterPayment',
        'minimum_order' => 'setMinimumOrder',
        'limit_order_slot' => 'setLimitOrderSlot',
        'order_slot' => 'setOrderSlot',
        'limit_order_gap' => 'setLimitOrderGap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'archive' => 'getArchive',
        'enable_note' => 'getEnableNote',
        'kitchen_level' => 'getKitchenLevel',
        'auto_open' => 'getAutoOpen',
        'ticket_delivery' => 'getTicketDelivery',
        'enable_order' => 'getEnableOrder',
        'enable_online_order' => 'getEnableOnlineOrder',
        'enable_billing_address' => 'getEnableBillingAddress',
        'enable_date_hour' => 'getEnableDateHour',
        'enable_delivery' => 'getEnableDelivery',
        'enable_shipping_cost' => 'getEnableShippingCost',
        'enable_online_payment' => 'getEnableOnlinePayment',
        'enable_counter_payment' => 'getEnableCounterPayment',
        'enable_secure_counter_payment' => 'getEnableSecureCounterPayment',
        'minimum_order' => 'getMinimumOrder',
        'limit_order_slot' => 'getLimitOrderSlot',
        'order_slot' => 'getOrderSlot',
        'limit_order_gap' => 'getLimitOrderGap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['archive'] = isset($data['archive']) ? $data['archive'] : null;
        $this->container['enable_note'] = isset($data['enable_note']) ? $data['enable_note'] : null;
        $this->container['kitchen_level'] = isset($data['kitchen_level']) ? $data['kitchen_level'] : null;
        $this->container['auto_open'] = isset($data['auto_open']) ? $data['auto_open'] : null;
        $this->container['ticket_delivery'] = isset($data['ticket_delivery']) ? $data['ticket_delivery'] : null;
        $this->container['enable_order'] = isset($data['enable_order']) ? $data['enable_order'] : null;
        $this->container['enable_online_order'] = isset($data['enable_online_order']) ? $data['enable_online_order'] : null;
        $this->container['enable_billing_address'] = isset($data['enable_billing_address']) ? $data['enable_billing_address'] : null;
        $this->container['enable_date_hour'] = isset($data['enable_date_hour']) ? $data['enable_date_hour'] : null;
        $this->container['enable_delivery'] = isset($data['enable_delivery']) ? $data['enable_delivery'] : null;
        $this->container['enable_shipping_cost'] = isset($data['enable_shipping_cost']) ? $data['enable_shipping_cost'] : null;
        $this->container['enable_online_payment'] = isset($data['enable_online_payment']) ? $data['enable_online_payment'] : null;
        $this->container['enable_counter_payment'] = isset($data['enable_counter_payment']) ? $data['enable_counter_payment'] : null;
        $this->container['enable_secure_counter_payment'] = isset($data['enable_secure_counter_payment']) ? $data['enable_secure_counter_payment'] : null;
        $this->container['minimum_order'] = isset($data['minimum_order']) ? $data['minimum_order'] : null;
        $this->container['limit_order_slot'] = isset($data['limit_order_slot']) ? $data['limit_order_slot'] : null;
        $this->container['order_slot'] = isset($data['order_slot']) ? $data['order_slot'] : null;
        $this->container['limit_order_gap'] = isset($data['limit_order_gap']) ? $data['limit_order_gap'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return 
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  $id Identifiant du mode de vente
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return 
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param  $name Nom du mode de vente
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return 
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param  $archive Niveau d'archivage du mode de vente
     *
     * @return $this
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets enable_note
     *
     * @return 
     */
    public function getEnableNote()
    {
        return $this->container['enable_note'];
    }

    /**
     * Sets enable_note
     *
     * @param  $enable_note Prise de note active sur le mode de vente
     *
     * @return $this
     */
    public function setEnableNote($enable_note)
    {
        $this->container['enable_note'] = $enable_note;

        return $this;
    }

    /**
     * Gets kitchen_level
     *
     * @return 
     */
    public function getKitchenLevel()
    {
        return $this->container['kitchen_level'];
    }

    /**
     * Sets kitchen_level
     *
     * @param  $kitchen_level [FACTURATION] Gestion des fabrications (0 = Gestion des fabrications désactivées, 1 = Gestion simplifiée des fabrications, 2 = Gestion des niveaux de fabrication)
     *
     * @return $this
     */
    public function setKitchenLevel($kitchen_level)
    {
        $this->container['kitchen_level'] = $kitchen_level;

        return $this;
    }

    /**
     * Gets auto_open
     *
     * @return 
     */
    public function getAutoOpen()
    {
        return $this->container['auto_open'];
    }

    /**
     * Sets auto_open
     *
     * @param  $auto_open [FACTURATION] Ouverture automatique d'une nouvelle note
     *
     * @return $this
     */
    public function setAutoOpen($auto_open)
    {
        $this->container['auto_open'] = $auto_open;

        return $this;
    }

    /**
     * Gets ticket_delivery
     *
     * @return 
     */
    public function getTicketDelivery()
    {
        return $this->container['ticket_delivery'];
    }

    /**
     * Sets ticket_delivery
     *
     * @param  $ticket_delivery [FACTURATION] Mise en attente de la note avant encaissement
     *
     * @return $this
     */
    public function setTicketDelivery($ticket_delivery)
    {
        $this->container['ticket_delivery'] = $ticket_delivery;

        return $this;
    }

    /**
     * Gets enable_order
     *
     * @return 
     */
    public function getEnableOrder()
    {
        return $this->container['enable_order'];
    }

    /**
     * Sets enable_order
     *
     * @param  $enable_order Prise de commande active sur le mode de vente
     *
     * @return $this
     */
    public function setEnableOrder($enable_order)
    {
        $this->container['enable_order'] = $enable_order;

        return $this;
    }

    /**
     * Gets enable_online_order
     *
     * @return 
     */
    public function getEnableOnlineOrder()
    {
        return $this->container['enable_online_order'];
    }

    /**
     * Sets enable_online_order
     *
     * @param  $enable_online_order Prise de commande en ligne active sur le mode de vente
     *
     * @return $this
     */
    public function setEnableOnlineOrder($enable_online_order)
    {
        $this->container['enable_online_order'] = $enable_online_order;

        return $this;
    }

    /**
     * Gets enable_billing_address
     *
     * @return 
     */
    public function getEnableBillingAddress()
    {
        return $this->container['enable_billing_address'];
    }

    /**
     * Sets enable_billing_address
     *
     * @param  $enable_billing_address [COMMANDE EN LIGNE] Saisie obligatoire d'une adresse de facturation
     *
     * @return $this
     */
    public function setEnableBillingAddress($enable_billing_address)
    {
        $this->container['enable_billing_address'] = $enable_billing_address;

        return $this;
    }

    /**
     * Gets enable_date_hour
     *
     * @return 
     */
    public function getEnableDateHour()
    {
        return $this->container['enable_date_hour'];
    }

    /**
     * Sets enable_date_hour
     *
     * @param  $enable_date_hour [COMMANDE EN LIGNE] Saisie obligatoire de la date et heure (si désactivé, la commande en ligne aura la date / heure de la prise de commande)
     *
     * @return $this
     */
    public function setEnableDateHour($enable_date_hour)
    {
        $this->container['enable_date_hour'] = $enable_date_hour;

        return $this;
    }

    /**
     * Gets enable_delivery
     *
     * @return 
     */
    public function getEnableDelivery()
    {
        return $this->container['enable_delivery'];
    }

    /**
     * Sets enable_delivery
     *
     * @param  $enable_delivery [COMMANDE EN LIGNE] Gestion des livraisons active sur le mode de vente
     *
     * @return $this
     */
    public function setEnableDelivery($enable_delivery)
    {
        $this->container['enable_delivery'] = $enable_delivery;

        return $this;
    }

    /**
     * Gets enable_shipping_cost
     *
     * @return 
     */
    public function getEnableShippingCost()
    {
        return $this->container['enable_shipping_cost'];
    }

    /**
     * Sets enable_shipping_cost
     *
     * @param  $enable_shipping_cost [COMMANDE EN LIGNE] Gestion des frais d'expeditions active sur le mode de vente
     *
     * @return $this
     */
    public function setEnableShippingCost($enable_shipping_cost)
    {
        $this->container['enable_shipping_cost'] = $enable_shipping_cost;

        return $this;
    }

    /**
     * Gets enable_online_payment
     *
     * @return 
     */
    public function getEnableOnlinePayment()
    {
        return $this->container['enable_online_payment'];
    }

    /**
     * Sets enable_online_payment
     *
     * @param  $enable_online_payment [COMMANDE EN LIGNE] Activer le paiement en ligne sur le mode de vente
     *
     * @return $this
     */
    public function setEnableOnlinePayment($enable_online_payment)
    {
        $this->container['enable_online_payment'] = $enable_online_payment;

        return $this;
    }

    /**
     * Gets enable_counter_payment
     *
     * @return 
     */
    public function getEnableCounterPayment()
    {
        return $this->container['enable_counter_payment'];
    }

    /**
     * Sets enable_counter_payment
     *
     * @param  $enable_counter_payment [COMMANDE EN LIGNE] Activer le paiement au comptoir sur le mode de vente
     *
     * @return $this
     */
    public function setEnableCounterPayment($enable_counter_payment)
    {
        $this->container['enable_counter_payment'] = $enable_counter_payment;

        return $this;
    }

    /**
     * Gets enable_secure_counter_payment
     *
     * @return 
     */
    public function getEnableSecureCounterPayment()
    {
        return $this->container['enable_secure_counter_payment'];
    }

    /**
     * Sets enable_secure_counter_payment
     *
     * @param  $enable_secure_counter_payment [COMMANDE EN LIGNE] Activer le paiement au comptoir avec saisie CB de garantie sur le mode de vente
     *
     * @return $this
     */
    public function setEnableSecureCounterPayment($enable_secure_counter_payment)
    {
        $this->container['enable_secure_counter_payment'] = $enable_secure_counter_payment;

        return $this;
    }

    /**
     * Gets minimum_order
     *
     * @return 
     */
    public function getMinimumOrder()
    {
        return $this->container['minimum_order'];
    }

    /**
     * Sets minimum_order
     *
     * @param  $minimum_order [COMMANDE EN LIGNE]  Montant minimum de commande
     *
     * @return $this
     */
    public function setMinimumOrder($minimum_order)
    {
        $this->container['minimum_order'] = $minimum_order;

        return $this;
    }

    /**
     * Gets limit_order_slot
     *
     * @return 
     */
    public function getLimitOrderSlot()
    {
        return $this->container['limit_order_slot'];
    }

    /**
     * Sets limit_order_slot
     *
     * @param  $limit_order_slot [COMMANDE EN LIGNE] Nombre de commandes par créneau horaire
     *
     * @return $this
     */
    public function setLimitOrderSlot($limit_order_slot)
    {
        $this->container['limit_order_slot'] = $limit_order_slot;

        return $this;
    }

    /**
     * Gets order_slot
     *
     * @return 
     */
    public function getOrderSlot()
    {
        return $this->container['order_slot'];
    }

    /**
     * Sets order_slot
     *
     * @param  $order_slot [COMMANDE EN LIGNE] Valeur du créneau horaire
     *
     * @return $this
     */
    public function setOrderSlot($order_slot)
    {
        $this->container['order_slot'] = $order_slot;

        return $this;
    }

    /**
     * Gets limit_order_gap
     *
     * @return 
     */
    public function getLimitOrderGap()
    {
        return $this->container['limit_order_gap'];
    }

    /**
     * Sets limit_order_gap
     *
     * @param  $limit_order_gap [COMMANDE EN LIGNE] Délai minimum entre la prise de commande et la récupération (en minutes)
     *
     * @return $this
     */
    public function setLimitOrderGap($limit_order_gap)
    {
        $this->container['limit_order_gap'] = $limit_order_gap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
