<?php
/**
 * PointOfSale
 *
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * PointOfSale Class Doc Comment
 *
 * @category Class
 * @description Class PointOfSale
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PointOfSale implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PointOfSale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '',
        'id_country' => '',
        'name' => '',
        'name_webshop' => '',
        'address' => '',
        'postal' => '',
        'city' => '',
        'website' => '',
        'phone' => '',
        'phone_2' => '',
        'company_identification' => '',
        'activity_identification' => '',
        'tax_identification' => '',
        'logo_base64' => '',
        'country' => '\Qwenta\Fulleapps\Model\Country',
        'legal_form' => '',
        'share_capital' => '',
        'webshop_display_mode' => '',
        'has_alcool' => '',
        'enable_order' => '',
        'enable_credit' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int',
        'id_country' => 'int',
        'name' => 'string',
        'name_webshop' => 'string',
        'address' => 'string',
        'postal' => 'string',
        'city' => 'string',
        'website' => 'string',
        'phone' => 'string',
        'phone_2' => 'string',
        'company_identification' => 'string',
        'activity_identification' => 'string',
        'tax_identification' => 'string',
        'logo_base64' => 'string',
        'country' => null,
        'legal_form' => 'string',
        'share_capital' => 'string',
        'webshop_display_mode' => 'int',
        'has_alcool' => 'int',
        'enable_order' => 'int',
        'enable_credit' => 'int'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'id_country' => 'id_country',
        'name' => 'name',
        'name_webshop' => 'name_webshop',
        'address' => 'address',
        'postal' => 'postal',
        'city' => 'city',
        'website' => 'website',
        'phone' => 'phone',
        'phone_2' => 'phone_2',
        'company_identification' => 'company_identification',
        'activity_identification' => 'activity_identification',
        'tax_identification' => 'tax_identification',
        'logo_base64' => 'logo_base64',
        'country' => 'country',
        'legal_form' => 'legal_form',
        'share_capital' => 'share_capital',
        'webshop_display_mode' => 'webshop_display_mode',
        'has_alcool' => 'has_alcool',
        'enable_order' => 'enable_order',
        'enable_credit' => 'enable_credit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'id_country' => 'setIdCountry',
        'name' => 'setName',
        'name_webshop' => 'setNameWebshop',
        'address' => 'setAddress',
        'postal' => 'setPostal',
        'city' => 'setCity',
        'website' => 'setWebsite',
        'phone' => 'setPhone',
        'phone_2' => 'setPhone2',
        'company_identification' => 'setCompanyIdentification',
        'activity_identification' => 'setActivityIdentification',
        'tax_identification' => 'setTaxIdentification',
        'logo_base64' => 'setLogoBase64',
        'country' => 'setCountry',
        'legal_form' => 'setLegalForm',
        'share_capital' => 'setShareCapital',
        'webshop_display_mode' => 'setWebshopDisplayMode',
        'has_alcool' => 'setHasAlcool',
        'enable_order' => 'setEnableOrder',
        'enable_credit' => 'setEnableCredit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'id_country' => 'getIdCountry',
        'name' => 'getName',
        'name_webshop' => 'getNameWebshop',
        'address' => 'getAddress',
        'postal' => 'getPostal',
        'city' => 'getCity',
        'website' => 'getWebsite',
        'phone' => 'getPhone',
        'phone_2' => 'getPhone2',
        'company_identification' => 'getCompanyIdentification',
        'activity_identification' => 'getActivityIdentification',
        'tax_identification' => 'getTaxIdentification',
        'logo_base64' => 'getLogoBase64',
        'country' => 'getCountry',
        'legal_form' => 'getLegalForm',
        'share_capital' => 'getShareCapital',
        'webshop_display_mode' => 'getWebshopDisplayMode',
        'has_alcool' => 'getHasAlcool',
        'enable_order' => 'getEnableOrder',
        'enable_credit' => 'getEnableCredit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['id_country'] = isset($data['id_country']) ? $data['id_country'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_webshop'] = isset($data['name_webshop']) ? $data['name_webshop'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['postal'] = isset($data['postal']) ? $data['postal'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone_2'] = isset($data['phone_2']) ? $data['phone_2'] : null;
        $this->container['company_identification'] = isset($data['company_identification']) ? $data['company_identification'] : null;
        $this->container['activity_identification'] = isset($data['activity_identification']) ? $data['activity_identification'] : null;
        $this->container['tax_identification'] = isset($data['tax_identification']) ? $data['tax_identification'] : null;
        $this->container['logo_base64'] = isset($data['logo_base64']) ? $data['logo_base64'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['legal_form'] = isset($data['legal_form']) ? $data['legal_form'] : null;
        $this->container['share_capital'] = isset($data['share_capital']) ? $data['share_capital'] : null;
        $this->container['webshop_display_mode'] = isset($data['webshop_display_mode']) ? $data['webshop_display_mode'] : null;
        $this->container['has_alcool'] = isset($data['has_alcool']) ? $data['has_alcool'] : null;
        $this->container['enable_order'] = isset($data['enable_order']) ? $data['enable_order'] : null;
        $this->container['enable_credit'] = isset($data['enable_credit']) ? $data['enable_credit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return 
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  $id Identifiant
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id_country
     *
     * @return 
     */
    public function getIdCountry()
    {
        return $this->container['id_country'];
    }

    /**
     * Sets id_country
     *
     * @param  $id_country Identifiant du pays associé
     *
     * @return $this
     */
    public function setIdCountry($id_country)
    {
        $this->container['id_country'] = $id_country;

        return $this;
    }

    /**
     * Gets name
     *
     * @return 
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param  $name Nom du point de vente
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_webshop
     *
     * @return 
     */
    public function getNameWebshop()
    {
        return $this->container['name_webshop'];
    }

    /**
     * Sets name_webshop
     *
     * @param  $name_webshop Nom du point de vente [AFFICHAGE WEBSHOP]
     *
     * @return $this
     */
    public function setNameWebshop($name_webshop)
    {
        $this->container['name_webshop'] = $name_webshop;

        return $this;
    }

    /**
     * Gets address
     *
     * @return 
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param  $address Adresse du point de vente
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postal
     *
     * @return 
     */
    public function getPostal()
    {
        return $this->container['postal'];
    }

    /**
     * Sets postal
     *
     * @param  $postal Code postal du point de vente
     *
     * @return $this
     */
    public function setPostal($postal)
    {
        $this->container['postal'] = $postal;

        return $this;
    }

    /**
     * Gets city
     *
     * @return 
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param  $city Ville du point de vente
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets website
     *
     * @return 
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param  $website Site WEB du point de vente
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return 
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param  $phone Téléphone du point de vente
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_2
     *
     * @return 
     */
    public function getPhone2()
    {
        return $this->container['phone_2'];
    }

    /**
     * Sets phone_2
     *
     * @param  $phone_2 Téléphone secondaire du point de vente
     *
     * @return $this
     */
    public function setPhone2($phone_2)
    {
        $this->container['phone_2'] = $phone_2;

        return $this;
    }

    /**
     * Gets company_identification
     *
     * @return 
     */
    public function getCompanyIdentification()
    {
        return $this->container['company_identification'];
    }

    /**
     * Sets company_identification
     *
     * @param  $company_identification N° identification société
     *
     * @return $this
     */
    public function setCompanyIdentification($company_identification)
    {
        $this->container['company_identification'] = $company_identification;

        return $this;
    }

    /**
     * Gets activity_identification
     *
     * @return 
     */
    public function getActivityIdentification()
    {
        return $this->container['activity_identification'];
    }

    /**
     * Sets activity_identification
     *
     * @param  $activity_identification N° identification activité société
     *
     * @return $this
     */
    public function setActivityIdentification($activity_identification)
    {
        $this->container['activity_identification'] = $activity_identification;

        return $this;
    }

    /**
     * Gets tax_identification
     *
     * @return 
     */
    public function getTaxIdentification()
    {
        return $this->container['tax_identification'];
    }

    /**
     * Sets tax_identification
     *
     * @param  $tax_identification N° identification taxe société
     *
     * @return $this
     */
    public function setTaxIdentification($tax_identification)
    {
        $this->container['tax_identification'] = $tax_identification;

        return $this;
    }

    /**
     * Gets logo_base64
     *
     * @return 
     */
    public function getLogoBase64()
    {
        return $this->container['logo_base64'];
    }

    /**
     * Sets logo_base64
     *
     * @param  $logo_base64 Logo du point de vente en base64
     *
     * @return $this
     */
    public function setLogoBase64($logo_base64)
    {
        $this->container['logo_base64'] = $logo_base64;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Qwenta\Fulleapps\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Qwenta\Fulleapps\Model\Country $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets legal_form
     *
     * @return 
     */
    public function getLegalForm()
    {
        return $this->container['legal_form'];
    }

    /**
     * Sets legal_form
     *
     * @param  $legal_form Forme juridique
     *
     * @return $this
     */
    public function setLegalForm($legal_form)
    {
        $this->container['legal_form'] = $legal_form;

        return $this;
    }

    /**
     * Gets share_capital
     *
     * @return 
     */
    public function getShareCapital()
    {
        return $this->container['share_capital'];
    }

    /**
     * Sets share_capital
     *
     * @param  $share_capital Capital social
     *
     * @return $this
     */
    public function setShareCapital($share_capital)
    {
        $this->container['share_capital'] = $share_capital;

        return $this;
    }

    /**
     * Gets webshop_display_mode
     *
     * @return 
     */
    public function getWebshopDisplayMode()
    {
        return $this->container['webshop_display_mode'];
    }

    /**
     * Sets webshop_display_mode
     *
     * @param  $webshop_display_mode [WEBSHOP] Affichage des produits (Affichage réduit, Affichage photo)
     *
     * @return $this
     */
    public function setWebshopDisplayMode($webshop_display_mode)
    {
        $this->container['webshop_display_mode'] = $webshop_display_mode;

        return $this;
    }

    /**
     * Gets has_alcool
     *
     * @return 
     */
    public function getHasAlcool()
    {
        return $this->container['has_alcool'];
    }

    /**
     * Sets has_alcool
     *
     * @param  $has_alcool [WEBSHOP] De l'alcool est vendu sur le point de vente, auquel cas les termes et mentions obligatoires figureront sur le site Internet
     *
     * @return $this
     */
    public function setHasAlcool($has_alcool)
    {
        $this->container['has_alcool'] = $has_alcool;

        return $this;
    }

    /**
     * Gets enable_order
     *
     * @return 
     */
    public function getEnableOrder()
    {
        return $this->container['enable_order'];
    }

    /**
     * Sets enable_order
     *
     * @param  $enable_order [WEBSHOP] Possibilité de commander en ligne
     *
     * @return $this
     */
    public function setEnableOrder($enable_order)
    {
        $this->container['enable_order'] = $enable_order;

        return $this;
    }

    /**
     * Gets enable_credit
     *
     * @return 
     */
    public function getEnableCredit()
    {
        return $this->container['enable_credit'];
    }

    /**
     * Sets enable_credit
     *
     * @param  $enable_credit [WEBSHOP] Possibilité de payer les crédits (débiteurs) en ligne
     *
     * @return $this
     */
    public function setEnableCredit($enable_credit)
    {
        $this->container['enable_credit'] = $enable_credit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
