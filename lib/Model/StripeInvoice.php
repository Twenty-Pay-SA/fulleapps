<?php
/**
 * StripeInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * StripeInvoice Class Doc Comment
 *
 * @category Class
 * @description Class StripeInvoice
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StripeInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StripeInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '',
        'comment' => '',
        'date' => '',
        'footer' => '',
        'r_invoice' => '',
        'reference' => '',
        'rate' => '',
        'ht' => '',
        'taxe' => '',
        'ttc' => '',
        'user_denomination' => '',
        'user_address' => '',
        'user_city' => '',
        'user_postal' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int',
        'comment' => 'string',
        'date' => 'datetime',
        'footer' => 'string',
        'r_invoice' => 'string',
        'reference' => 'string',
        'rate' => 'float',
        'ht' => 'float',
        'taxe' => 'float',
        'ttc' => 'float',
        'user_denomination' => 'string',
        'user_address' => 'string',
        'user_city' => 'string',
        'user_postal' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'comment' => 'comment',
        'date' => 'date',
        'footer' => 'footer',
        'r_invoice' => 'r_invoice',
        'reference' => 'reference',
        'rate' => 'rate',
        'ht' => 'ht',
        'taxe' => 'taxe',
        'ttc' => 'ttc',
        'user_denomination' => 'user_denomination',
        'user_address' => 'user_address',
        'user_city' => 'user_city',
        'user_postal' => 'user_postal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'comment' => 'setComment',
        'date' => 'setDate',
        'footer' => 'setFooter',
        'r_invoice' => 'setRInvoice',
        'reference' => 'setReference',
        'rate' => 'setRate',
        'ht' => 'setHt',
        'taxe' => 'setTaxe',
        'ttc' => 'setTtc',
        'user_denomination' => 'setUserDenomination',
        'user_address' => 'setUserAddress',
        'user_city' => 'setUserCity',
        'user_postal' => 'setUserPostal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'comment' => 'getComment',
        'date' => 'getDate',
        'footer' => 'getFooter',
        'r_invoice' => 'getRInvoice',
        'reference' => 'getReference',
        'rate' => 'getRate',
        'ht' => 'getHt',
        'taxe' => 'getTaxe',
        'ttc' => 'getTtc',
        'user_denomination' => 'getUserDenomination',
        'user_address' => 'getUserAddress',
        'user_city' => 'getUserCity',
        'user_postal' => 'getUserPostal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['r_invoice'] = isset($data['r_invoice']) ? $data['r_invoice'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['ht'] = isset($data['ht']) ? $data['ht'] : null;
        $this->container['taxe'] = isset($data['taxe']) ? $data['taxe'] : null;
        $this->container['ttc'] = isset($data['ttc']) ? $data['ttc'] : null;
        $this->container['user_denomination'] = isset($data['user_denomination']) ? $data['user_denomination'] : null;
        $this->container['user_address'] = isset($data['user_address']) ? $data['user_address'] : null;
        $this->container['user_city'] = isset($data['user_city']) ? $data['user_city'] : null;
        $this->container['user_postal'] = isset($data['user_postal']) ? $data['user_postal'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return 
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  $id Identifiant de la facture d'abonnement
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return 
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param  $comment Commentaire
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets date
     *
     * @return 
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param  $date Date de la facture
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return 
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param  $footer Pied de facture
     *
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets r_invoice
     *
     * @return 
     */
    public function getRInvoice()
    {
        return $this->container['r_invoice'];
    }

    /**
     * Sets r_invoice
     *
     * @param  $r_invoice Référence de facture
     *
     * @return $this
     */
    public function setRInvoice($r_invoice)
    {
        $this->container['r_invoice'] = $r_invoice;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return 
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param  $reference Référence Stripe de facture
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return 
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param  $rate Taxe globale de la facture d'abonnement
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets ht
     *
     * @return 
     */
    public function getHt()
    {
        return $this->container['ht'];
    }

    /**
     * Sets ht
     *
     * @param  $ht Montant HT de la facture d'abonnement
     *
     * @return $this
     */
    public function setHt($ht)
    {
        $this->container['ht'] = $ht;

        return $this;
    }

    /**
     * Gets taxe
     *
     * @return 
     */
    public function getTaxe()
    {
        return $this->container['taxe'];
    }

    /**
     * Sets taxe
     *
     * @param  $taxe Montant Taxe de la facture d'abonnement
     *
     * @return $this
     */
    public function setTaxe($taxe)
    {
        $this->container['taxe'] = $taxe;

        return $this;
    }

    /**
     * Gets ttc
     *
     * @return 
     */
    public function getTtc()
    {
        return $this->container['ttc'];
    }

    /**
     * Sets ttc
     *
     * @param  $ttc Montant TTC de la facture d'abonnement
     *
     * @return $this
     */
    public function setTtc($ttc)
    {
        $this->container['ttc'] = $ttc;

        return $this;
    }

    /**
     * Gets user_denomination
     *
     * @return 
     */
    public function getUserDenomination()
    {
        return $this->container['user_denomination'];
    }

    /**
     * Sets user_denomination
     *
     * @param  $user_denomination Raison sociale du client
     *
     * @return $this
     */
    public function setUserDenomination($user_denomination)
    {
        $this->container['user_denomination'] = $user_denomination;

        return $this;
    }

    /**
     * Gets user_address
     *
     * @return 
     */
    public function getUserAddress()
    {
        return $this->container['user_address'];
    }

    /**
     * Sets user_address
     *
     * @param  $user_address Adresse de facturation du client
     *
     * @return $this
     */
    public function setUserAddress($user_address)
    {
        $this->container['user_address'] = $user_address;

        return $this;
    }

    /**
     * Gets user_city
     *
     * @return 
     */
    public function getUserCity()
    {
        return $this->container['user_city'];
    }

    /**
     * Sets user_city
     *
     * @param  $user_city Ville de facturation du client
     *
     * @return $this
     */
    public function setUserCity($user_city)
    {
        $this->container['user_city'] = $user_city;

        return $this;
    }

    /**
     * Gets user_postal
     *
     * @return 
     */
    public function getUserPostal()
    {
        return $this->container['user_postal'];
    }

    /**
     * Sets user_postal
     *
     * @param  $user_postal Code postal de facturation du client
     *
     * @return $this
     */
    public function setUserPostal($user_postal)
    {
        $this->container['user_postal'] = $user_postal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
