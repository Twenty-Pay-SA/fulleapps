<?php
/**
 * DeliveryZone
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * DeliveryZone Class Doc Comment
 *
 * @category Class
 * @description Pet model
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryZone implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryZone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '',
        'id_city' => '',
        'id_point_of_sale' => '',
        'delivery_price' => '',
        'offered_from' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int',
        'id_city' => 'int',
        'id_point_of_sale' => 'int',
        'delivery_price' => 'float',
        'offered_from' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'id_city' => 'id_city',
        'id_point_of_sale' => 'id_point_of_sale',
        'delivery_price' => 'delivery_price',
        'offered_from' => 'offered_from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'id_city' => 'setIdCity',
        'id_point_of_sale' => 'setIdPointOfSale',
        'delivery_price' => 'setDeliveryPrice',
        'offered_from' => 'setOfferedFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'id_city' => 'getIdCity',
        'id_point_of_sale' => 'getIdPointOfSale',
        'delivery_price' => 'getDeliveryPrice',
        'offered_from' => 'getOfferedFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['id_city'] = isset($data['id_city']) ? $data['id_city'] : null;
        $this->container['id_point_of_sale'] = isset($data['id_point_of_sale']) ? $data['id_point_of_sale'] : null;
        $this->container['delivery_price'] = isset($data['delivery_price']) ? $data['delivery_price'] : null;
        $this->container['offered_from'] = isset($data['offered_from']) ? $data['offered_from'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_city'] === null) {
            $invalidProperties[] = "'id_city' can't be null";
        }
        if ($this->container['id_point_of_sale'] === null) {
            $invalidProperties[] = "'id_point_of_sale' can't be null";
        }
        if ($this->container['delivery_price'] === null) {
            $invalidProperties[] = "'delivery_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return 
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  $id Identifiant
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id_city
     *
     * @return 
     */
    public function getIdCity()
    {
        return $this->container['id_city'];
    }

    /**
     * Sets id_city
     *
     * @param  $id_city Identifiant de la ville
     *
     * @return $this
     */
    public function setIdCity($id_city)
    {
        $this->container['id_city'] = $id_city;

        return $this;
    }

    /**
     * Gets id_point_of_sale
     *
     * @return 
     */
    public function getIdPointOfSale()
    {
        return $this->container['id_point_of_sale'];
    }

    /**
     * Sets id_point_of_sale
     *
     * @param  $id_point_of_sale Identifiant du point de vente
     *
     * @return $this
     */
    public function setIdPointOfSale($id_point_of_sale)
    {
        $this->container['id_point_of_sale'] = $id_point_of_sale;

        return $this;
    }

    /**
     * Gets delivery_price
     *
     * @return 
     */
    public function getDeliveryPrice()
    {
        return $this->container['delivery_price'];
    }

    /**
     * Sets delivery_price
     *
     * @param  $delivery_price Tarif de livraison
     *
     * @return $this
     */
    public function setDeliveryPrice($delivery_price)
    {
        $this->container['delivery_price'] = $delivery_price;

        return $this;
    }

    /**
     * Gets offered_from
     *
     * @return 
     */
    public function getOfferedFrom()
    {
        return $this->container['offered_from'];
    }

    /**
     * Sets offered_from
     *
     * @param  $offered_from Offert à partir de X€ (null si non géré)
     *
     * @return $this
     */
    public function setOfferedFrom($offered_from)
    {
        $this->container['offered_from'] = $offered_from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
