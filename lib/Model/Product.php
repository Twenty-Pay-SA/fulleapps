<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description Class Product
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '',
        'name' => '\Qwenta\Fulleapps\Model\ProductName',
        'short_name' => '\Qwenta\Fulleapps\Model\ProductShortName',
        'order_name' => '\Qwenta\Fulleapps\Model\ProductOrderName',
        'rubric' => '\Qwenta\Fulleapps\Model\Rubric',
        'image' => '',
        'archive' => '',
        'barcodes' => '',
        'product_type' => '\Qwenta\Fulleapps\Model\ProductProductType',
        'free_price' => '\Qwenta\Fulleapps\Model\ProductFreePrice',
        'blocked' => '\Qwenta\Fulleapps\Model\ProductBlocked',
        'description' => '\Qwenta\Fulleapps\Model\ProductDescription',
        'optional_selection' => '\Qwenta\Fulleapps\Model\ProductOptionalSelection',
        'points' => '\Qwenta\Fulleapps\Model\ProductPoints',
        'fidelity_points' => '\Qwenta\Fulleapps\Model\ProductFidelityPoints',
        'expiration' => '\Qwenta\Fulleapps\Model\ProductExpiration',
        'enable_comment' => '\Qwenta\Fulleapps\Model\ProductEnableComment',
        'minimum_stock' => '\Qwenta\Fulleapps\Model\ProductMinimumStock',
        'cost_price' => '\Qwenta\Fulleapps\Model\ProductCostPrice',
        'weight' => '\Qwenta\Fulleapps\Model\ProductWeight',
        'volume' => '\Qwenta\Fulleapps\Model\ProductVolume',
        'prices' => '\Qwenta\Fulleapps\Model\ProductPrices',
        'categories' => '\Qwenta\Fulleapps\Model\ProductCategories',
        'barcode_variations' => '\Qwenta\Fulleapps\Model\ProductBarcodes',
        'allergens' => '\Qwenta\Fulleapps\Model\ProductAllergens'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int',
        'name' => null,
        'short_name' => null,
        'order_name' => null,
        'rubric' => null,
        'image' => 'array',
        'archive' => 'int',
        'barcodes' => 'array',
        'product_type' => null,
        'free_price' => null,
        'blocked' => null,
        'description' => null,
        'optional_selection' => null,
        'points' => null,
        'fidelity_points' => null,
        'expiration' => null,
        'enable_comment' => null,
        'minimum_stock' => null,
        'cost_price' => null,
        'weight' => null,
        'volume' => null,
        'prices' => null,
        'categories' => null,
        'barcode_variations' => null,
        'allergens' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'short_name' => 'short_name',
        'order_name' => 'order_name',
        'rubric' => 'rubric',
        'image' => 'image',
        'archive' => 'archive',
        'barcodes' => 'barcodes',
        'product_type' => 'product_type',
        'free_price' => 'free_price',
        'blocked' => 'blocked',
        'description' => 'description',
        'optional_selection' => 'optional_selection',
        'points' => 'points',
        'fidelity_points' => 'fidelity_points',
        'expiration' => 'expiration',
        'enable_comment' => 'enable_comment',
        'minimum_stock' => 'minimum_stock',
        'cost_price' => 'cost_price',
        'weight' => 'weight',
        'volume' => 'volume',
        'prices' => 'prices',
        'categories' => 'categories',
        'barcode_variations' => 'barcode_variations',
        'allergens' => 'allergens'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'order_name' => 'setOrderName',
        'rubric' => 'setRubric',
        'image' => 'setImage',
        'archive' => 'setArchive',
        'barcodes' => 'setBarcodes',
        'product_type' => 'setProductType',
        'free_price' => 'setFreePrice',
        'blocked' => 'setBlocked',
        'description' => 'setDescription',
        'optional_selection' => 'setOptionalSelection',
        'points' => 'setPoints',
        'fidelity_points' => 'setFidelityPoints',
        'expiration' => 'setExpiration',
        'enable_comment' => 'setEnableComment',
        'minimum_stock' => 'setMinimumStock',
        'cost_price' => 'setCostPrice',
        'weight' => 'setWeight',
        'volume' => 'setVolume',
        'prices' => 'setPrices',
        'categories' => 'setCategories',
        'barcode_variations' => 'setBarcodeVariations',
        'allergens' => 'setAllergens'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'order_name' => 'getOrderName',
        'rubric' => 'getRubric',
        'image' => 'getImage',
        'archive' => 'getArchive',
        'barcodes' => 'getBarcodes',
        'product_type' => 'getProductType',
        'free_price' => 'getFreePrice',
        'blocked' => 'getBlocked',
        'description' => 'getDescription',
        'optional_selection' => 'getOptionalSelection',
        'points' => 'getPoints',
        'fidelity_points' => 'getFidelityPoints',
        'expiration' => 'getExpiration',
        'enable_comment' => 'getEnableComment',
        'minimum_stock' => 'getMinimumStock',
        'cost_price' => 'getCostPrice',
        'weight' => 'getWeight',
        'volume' => 'getVolume',
        'prices' => 'getPrices',
        'categories' => 'getCategories',
        'barcode_variations' => 'getBarcodeVariations',
        'allergens' => 'getAllergens'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['order_name'] = isset($data['order_name']) ? $data['order_name'] : null;
        $this->container['rubric'] = isset($data['rubric']) ? $data['rubric'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['archive'] = isset($data['archive']) ? $data['archive'] : null;
        $this->container['barcodes'] = isset($data['barcodes']) ? $data['barcodes'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['free_price'] = isset($data['free_price']) ? $data['free_price'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['optional_selection'] = isset($data['optional_selection']) ? $data['optional_selection'] : null;
        $this->container['points'] = isset($data['points']) ? $data['points'] : null;
        $this->container['fidelity_points'] = isset($data['fidelity_points']) ? $data['fidelity_points'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['enable_comment'] = isset($data['enable_comment']) ? $data['enable_comment'] : null;
        $this->container['minimum_stock'] = isset($data['minimum_stock']) ? $data['minimum_stock'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['prices'] = isset($data['prices']) ? $data['prices'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['barcode_variations'] = isset($data['barcode_variations']) ? $data['barcode_variations'] : null;
        $this->container['allergens'] = isset($data['allergens']) ? $data['allergens'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return 
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  $id Identifiant du produit
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Qwenta\Fulleapps\Model\ProductName
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Qwenta\Fulleapps\Model\ProductName $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return \Qwenta\Fulleapps\Model\ProductShortName
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param \Qwenta\Fulleapps\Model\ProductShortName $short_name short_name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets order_name
     *
     * @return \Qwenta\Fulleapps\Model\ProductOrderName
     */
    public function getOrderName()
    {
        return $this->container['order_name'];
    }

    /**
     * Sets order_name
     *
     * @param \Qwenta\Fulleapps\Model\ProductOrderName $order_name order_name
     *
     * @return $this
     */
    public function setOrderName($order_name)
    {
        $this->container['order_name'] = $order_name;

        return $this;
    }

    /**
     * Gets rubric
     *
     * @return \Qwenta\Fulleapps\Model\Rubric
     */
    public function getRubric()
    {
        return $this->container['rubric'];
    }

    /**
     * Sets rubric
     *
     * @param \Qwenta\Fulleapps\Model\Rubric $rubric rubric
     *
     * @return $this
     */
    public function setRubric($rubric)
    {
        $this->container['rubric'] = $rubric;

        return $this;
    }

    /**
     * Gets image
     *
     * @return 
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param  $image Image du produit (72x72, 128x128, 256x256, 512x512)
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return 
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param  $archive Niveau d'archivage
     *
     * @return $this
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets barcodes
     *
     * @return 
     */
    public function getBarcodes()
    {
        return $this->container['barcodes'];
    }

    /**
     * Sets barcodes
     *
     * @param  $barcodes DEPRECATED, remplacé par barcode_variations
     *
     * @return $this
     */
    public function setBarcodes($barcodes)
    {
        $this->container['barcodes'] = $barcodes;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return \Qwenta\Fulleapps\Model\ProductProductType
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param \Qwenta\Fulleapps\Model\ProductProductType $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets free_price
     *
     * @return \Qwenta\Fulleapps\Model\ProductFreePrice
     */
    public function getFreePrice()
    {
        return $this->container['free_price'];
    }

    /**
     * Sets free_price
     *
     * @param \Qwenta\Fulleapps\Model\ProductFreePrice $free_price free_price
     *
     * @return $this
     */
    public function setFreePrice($free_price)
    {
        $this->container['free_price'] = $free_price;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return \Qwenta\Fulleapps\Model\ProductBlocked
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param \Qwenta\Fulleapps\Model\ProductBlocked $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \Qwenta\Fulleapps\Model\ProductDescription
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \Qwenta\Fulleapps\Model\ProductDescription $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets optional_selection
     *
     * @return \Qwenta\Fulleapps\Model\ProductOptionalSelection
     */
    public function getOptionalSelection()
    {
        return $this->container['optional_selection'];
    }

    /**
     * Sets optional_selection
     *
     * @param \Qwenta\Fulleapps\Model\ProductOptionalSelection $optional_selection optional_selection
     *
     * @return $this
     */
    public function setOptionalSelection($optional_selection)
    {
        $this->container['optional_selection'] = $optional_selection;

        return $this;
    }

    /**
     * Gets points
     *
     * @return \Qwenta\Fulleapps\Model\ProductPoints
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param \Qwenta\Fulleapps\Model\ProductPoints $points points
     *
     * @return $this
     */
    public function setPoints($points)
    {
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets fidelity_points
     *
     * @return \Qwenta\Fulleapps\Model\ProductFidelityPoints
     */
    public function getFidelityPoints()
    {
        return $this->container['fidelity_points'];
    }

    /**
     * Sets fidelity_points
     *
     * @param \Qwenta\Fulleapps\Model\ProductFidelityPoints $fidelity_points fidelity_points
     *
     * @return $this
     */
    public function setFidelityPoints($fidelity_points)
    {
        $this->container['fidelity_points'] = $fidelity_points;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \Qwenta\Fulleapps\Model\ProductExpiration
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \Qwenta\Fulleapps\Model\ProductExpiration $expiration expiration
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets enable_comment
     *
     * @return \Qwenta\Fulleapps\Model\ProductEnableComment
     */
    public function getEnableComment()
    {
        return $this->container['enable_comment'];
    }

    /**
     * Sets enable_comment
     *
     * @param \Qwenta\Fulleapps\Model\ProductEnableComment $enable_comment enable_comment
     *
     * @return $this
     */
    public function setEnableComment($enable_comment)
    {
        $this->container['enable_comment'] = $enable_comment;

        return $this;
    }

    /**
     * Gets minimum_stock
     *
     * @return \Qwenta\Fulleapps\Model\ProductMinimumStock
     */
    public function getMinimumStock()
    {
        return $this->container['minimum_stock'];
    }

    /**
     * Sets minimum_stock
     *
     * @param \Qwenta\Fulleapps\Model\ProductMinimumStock $minimum_stock minimum_stock
     *
     * @return $this
     */
    public function setMinimumStock($minimum_stock)
    {
        $this->container['minimum_stock'] = $minimum_stock;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return \Qwenta\Fulleapps\Model\ProductCostPrice
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param \Qwenta\Fulleapps\Model\ProductCostPrice $cost_price cost_price
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \Qwenta\Fulleapps\Model\ProductWeight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \Qwenta\Fulleapps\Model\ProductWeight $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return \Qwenta\Fulleapps\Model\ProductVolume
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param \Qwenta\Fulleapps\Model\ProductVolume $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return \Qwenta\Fulleapps\Model\ProductPrices
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param \Qwenta\Fulleapps\Model\ProductPrices $prices prices
     *
     * @return $this
     */
    public function setPrices($prices)
    {
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Qwenta\Fulleapps\Model\ProductCategories
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Qwenta\Fulleapps\Model\ProductCategories $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets barcode_variations
     *
     * @return \Qwenta\Fulleapps\Model\ProductBarcodes
     */
    public function getBarcodeVariations()
    {
        return $this->container['barcode_variations'];
    }

    /**
     * Sets barcode_variations
     *
     * @param \Qwenta\Fulleapps\Model\ProductBarcodes $barcode_variations barcode_variations
     *
     * @return $this
     */
    public function setBarcodeVariations($barcode_variations)
    {
        $this->container['barcode_variations'] = $barcode_variations;

        return $this;
    }

    /**
     * Gets allergens
     *
     * @return \Qwenta\Fulleapps\Model\ProductAllergens
     */
    public function getAllergens()
    {
        return $this->container['allergens'];
    }

    /**
     * Sets allergens
     *
     * @param \Qwenta\Fulleapps\Model\ProductAllergens $allergens allergens
     *
     * @return $this
     */
    public function setAllergens($allergens)
    {
        $this->container['allergens'] = $allergens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
