<?php
/**
 * Client
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @description Class Client
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Client implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '',
        'category' => '',
        'civility' => '',
        'firstname' => '',
        'lastname' => '',
        'fullname' => '',
        'society' => '',
        'reference' => '',
        'description' => '',
        'mail' => '',
        'mail_2' => '',
        'phone' => '',
        'phone_2' => '',
        'phone_country' => '',
        'phone_2_country' => '',
        'address' => '',
        'postal' => '',
        'city' => '',
        'birthday' => '',
        'tax_identification' => '',
        'company_identification' => '',
        'activity_identification' => '',
        'group' => '\Qwenta\Fulleapps\Model\ClientGroup',
        'addresses' => '\Qwenta\Fulleapps\Model\ClientAddresses',
        'client_attributes' => '\Qwenta\Fulleapps\Model\ClientAssociateAttributes',
        'archive' => '',
        'send_by_mail' => '',
        'enable_marketing' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int',
        'category' => 'int',
        'civility' => 'int',
        'firstname' => 'int',
        'lastname' => 'int',
        'fullname' => 'int',
        'society' => 'int',
        'reference' => 'string',
        'description' => 'string',
        'mail' => 'int',
        'mail_2' => 'int',
        'phone' => 'int',
        'phone_2' => 'int',
        'phone_country' => 'string',
        'phone_2_country' => 'string',
        'address' => 'int',
        'postal' => 'int',
        'city' => 'int',
        'birthday' => 'date',
        'tax_identification' => 'string',
        'company_identification' => 'string',
        'activity_identification' => 'string',
        'group' => null,
        'addresses' => null,
        'client_attributes' => null,
        'archive' => 'int',
        'send_by_mail' => 'int',
        'enable_marketing' => 'int'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category' => 'category',
        'civility' => 'civility',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'fullname' => 'fullname',
        'society' => 'society',
        'reference' => 'reference',
        'description' => 'description',
        'mail' => 'mail',
        'mail_2' => 'mail_2',
        'phone' => 'phone',
        'phone_2' => 'phone_2',
        'phone_country' => 'phone_country',
        'phone_2_country' => 'phone_2_country',
        'address' => 'address',
        'postal' => 'postal',
        'city' => 'city',
        'birthday' => 'birthday',
        'tax_identification' => 'tax_identification',
        'company_identification' => 'company_identification',
        'activity_identification' => 'activity_identification',
        'group' => 'group',
        'addresses' => 'addresses',
        'client_attributes' => 'client_attributes',
        'archive' => 'archive',
        'send_by_mail' => 'send_by_mail',
        'enable_marketing' => 'enable_marketing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category' => 'setCategory',
        'civility' => 'setCivility',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'fullname' => 'setFullname',
        'society' => 'setSociety',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'mail' => 'setMail',
        'mail_2' => 'setMail2',
        'phone' => 'setPhone',
        'phone_2' => 'setPhone2',
        'phone_country' => 'setPhoneCountry',
        'phone_2_country' => 'setPhone2Country',
        'address' => 'setAddress',
        'postal' => 'setPostal',
        'city' => 'setCity',
        'birthday' => 'setBirthday',
        'tax_identification' => 'setTaxIdentification',
        'company_identification' => 'setCompanyIdentification',
        'activity_identification' => 'setActivityIdentification',
        'group' => 'setGroup',
        'addresses' => 'setAddresses',
        'client_attributes' => 'setClientAttributes',
        'archive' => 'setArchive',
        'send_by_mail' => 'setSendByMail',
        'enable_marketing' => 'setEnableMarketing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category' => 'getCategory',
        'civility' => 'getCivility',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'fullname' => 'getFullname',
        'society' => 'getSociety',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'mail' => 'getMail',
        'mail_2' => 'getMail2',
        'phone' => 'getPhone',
        'phone_2' => 'getPhone2',
        'phone_country' => 'getPhoneCountry',
        'phone_2_country' => 'getPhone2Country',
        'address' => 'getAddress',
        'postal' => 'getPostal',
        'city' => 'getCity',
        'birthday' => 'getBirthday',
        'tax_identification' => 'getTaxIdentification',
        'company_identification' => 'getCompanyIdentification',
        'activity_identification' => 'getActivityIdentification',
        'group' => 'getGroup',
        'addresses' => 'getAddresses',
        'client_attributes' => 'getClientAttributes',
        'archive' => 'getArchive',
        'send_by_mail' => 'getSendByMail',
        'enable_marketing' => 'getEnableMarketing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['civility'] = isset($data['civility']) ? $data['civility'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['fullname'] = isset($data['fullname']) ? $data['fullname'] : null;
        $this->container['society'] = isset($data['society']) ? $data['society'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['mail'] = isset($data['mail']) ? $data['mail'] : null;
        $this->container['mail_2'] = isset($data['mail_2']) ? $data['mail_2'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['phone_2'] = isset($data['phone_2']) ? $data['phone_2'] : null;
        $this->container['phone_country'] = isset($data['phone_country']) ? $data['phone_country'] : null;
        $this->container['phone_2_country'] = isset($data['phone_2_country']) ? $data['phone_2_country'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['postal'] = isset($data['postal']) ? $data['postal'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['tax_identification'] = isset($data['tax_identification']) ? $data['tax_identification'] : null;
        $this->container['company_identification'] = isset($data['company_identification']) ? $data['company_identification'] : null;
        $this->container['activity_identification'] = isset($data['activity_identification']) ? $data['activity_identification'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['client_attributes'] = isset($data['client_attributes']) ? $data['client_attributes'] : null;
        $this->container['archive'] = isset($data['archive']) ? $data['archive'] : null;
        $this->container['send_by_mail'] = isset($data['send_by_mail']) ? $data['send_by_mail'] : null;
        $this->container['enable_marketing'] = isset($data['enable_marketing']) ? $data['enable_marketing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return 
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param  $id Identifiant du client
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return 
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param  $category Catégorie du client (1 = Personne physique, 2 = Personne morale)
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets civility
     *
     * @return 
     */
    public function getCivility()
    {
        return $this->container['civility'];
    }

    /**
     * Sets civility
     *
     * @param  $civility Civilité du client (0 = Monsieur, 1 = Madame, 3 = Non binaire)
     *
     * @return $this
     */
    public function setCivility($civility)
    {
        $this->container['civility'] = $civility;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return 
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param  $firstname Prénom du client
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return 
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param  $lastname Nom du client
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return 
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param  $fullname Nom complet du client
     *
     * @return $this
     */
    public function setFullname($fullname)
    {
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets society
     *
     * @return 
     */
    public function getSociety()
    {
        return $this->container['society'];
    }

    /**
     * Sets society
     *
     * @param  $society Société du client
     *
     * @return $this
     */
    public function setSociety($society)
    {
        $this->container['society'] = $society;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return 
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param  $reference Référence du client (unique)
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return 
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param  $description Description du client
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return 
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param  $mail Mail du client (unique)
     *
     * @return $this
     */
    public function setMail($mail)
    {
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets mail_2
     *
     * @return 
     */
    public function getMail2()
    {
        return $this->container['mail_2'];
    }

    /**
     * Sets mail_2
     *
     * @param  $mail_2 Mail secondaire du client
     *
     * @return $this
     */
    public function setMail2($mail_2)
    {
        $this->container['mail_2'] = $mail_2;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return 
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param  $phone Téléphone mobile du client (unique)
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_2
     *
     * @return 
     */
    public function getPhone2()
    {
        return $this->container['phone_2'];
    }

    /**
     * Sets phone_2
     *
     * @param  $phone_2 Téléphone secondaire du client
     *
     * @return $this
     */
    public function setPhone2($phone_2)
    {
        $this->container['phone_2'] = $phone_2;

        return $this;
    }

    /**
     * Gets phone_country
     *
     * @return 
     */
    public function getPhoneCountry()
    {
        return $this->container['phone_country'];
    }

    /**
     * Sets phone_country
     *
     * @param  $phone_country Code pays du téléphone mobile du client
     *
     * @return $this
     */
    public function setPhoneCountry($phone_country)
    {
        $this->container['phone_country'] = $phone_country;

        return $this;
    }

    /**
     * Gets phone_2_country
     *
     * @return 
     */
    public function getPhone2Country()
    {
        return $this->container['phone_2_country'];
    }

    /**
     * Sets phone_2_country
     *
     * @param  $phone_2_country Code pays du téléphone secondaire du client
     *
     * @return $this
     */
    public function setPhone2Country($phone_2_country)
    {
        $this->container['phone_2_country'] = $phone_2_country;

        return $this;
    }

    /**
     * Gets address
     *
     * @return 
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param  $address Adresse du client
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postal
     *
     * @return 
     */
    public function getPostal()
    {
        return $this->container['postal'];
    }

    /**
     * Sets postal
     *
     * @param  $postal Code postal du client
     *
     * @return $this
     */
    public function setPostal($postal)
    {
        $this->container['postal'] = $postal;

        return $this;
    }

    /**
     * Gets city
     *
     * @return 
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param  $city Ville du client
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return 
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param  $birthday Date de naissance
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets tax_identification
     *
     * @return 
     */
    public function getTaxIdentification()
    {
        return $this->container['tax_identification'];
    }

    /**
     * Sets tax_identification
     *
     * @param  $tax_identification Numéro de taxation de la société
     *
     * @return $this
     */
    public function setTaxIdentification($tax_identification)
    {
        $this->container['tax_identification'] = $tax_identification;

        return $this;
    }

    /**
     * Gets company_identification
     *
     * @return 
     */
    public function getCompanyIdentification()
    {
        return $this->container['company_identification'];
    }

    /**
     * Sets company_identification
     *
     * @param  $company_identification Numéro d'identification de la société
     *
     * @return $this
     */
    public function setCompanyIdentification($company_identification)
    {
        $this->container['company_identification'] = $company_identification;

        return $this;
    }

    /**
     * Gets activity_identification
     *
     * @return 
     */
    public function getActivityIdentification()
    {
        return $this->container['activity_identification'];
    }

    /**
     * Sets activity_identification
     *
     * @param  $activity_identification Numéro d'activité de la société
     *
     * @return $this
     */
    public function setActivityIdentification($activity_identification)
    {
        $this->container['activity_identification'] = $activity_identification;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \Qwenta\Fulleapps\Model\ClientGroup
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Qwenta\Fulleapps\Model\ClientGroup $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Qwenta\Fulleapps\Model\ClientAddresses
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Qwenta\Fulleapps\Model\ClientAddresses $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets client_attributes
     *
     * @return \Qwenta\Fulleapps\Model\ClientAssociateAttributes
     */
    public function getClientAttributes()
    {
        return $this->container['client_attributes'];
    }

    /**
     * Sets client_attributes
     *
     * @param \Qwenta\Fulleapps\Model\ClientAssociateAttributes $client_attributes client_attributes
     *
     * @return $this
     */
    public function setClientAttributes($client_attributes)
    {
        $this->container['client_attributes'] = $client_attributes;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return 
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param  $archive Niveau d'archivage du client (0 = actif, 1 = archivé/bloqué, 2 = supprimé)
     *
     * @return $this
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets send_by_mail
     *
     * @return 
     */
    public function getSendByMail()
    {
        return $this->container['send_by_mail'];
    }

    /**
     * Sets send_by_mail
     *
     * @param  $send_by_mail 1 pour envoyer automatiquement la facture par mail, sinon 0
     *
     * @return $this
     */
    public function setSendByMail($send_by_mail)
    {
        $this->container['send_by_mail'] = $send_by_mail;

        return $this;
    }

    /**
     * Gets enable_marketing
     *
     * @return 
     */
    public function getEnableMarketing()
    {
        return $this->container['enable_marketing'];
    }

    /**
     * Sets enable_marketing
     *
     * @param  $enable_marketing Le client accepte de recevoir les newsletters et offres dans le cadre d'opérations marketing
     *
     * @return $this
     */
    public function setEnableMarketing($enable_marketing)
    {
        $this->container['enable_marketing'] = $enable_marketing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
