<?php
/**
 * BookingU
 *
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * BookingU Class Doc Comment
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingU implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BookingU';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_execution' => '\Qwenta\Fulleapps\Model\BookingDateExecution',
        'hour_execution' => '\Qwenta\Fulleapps\Model\BookingHourExecution',
        'hour_end_execution' => '\Qwenta\Fulleapps\Model\BookingHourEndExecution',
        'n_people' => '\Qwenta\Fulleapps\Model\BookingNPeople',
        'comment' => '\Qwenta\Fulleapps\Model\BookingComment',
        'notify' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_execution' => null,
        'hour_execution' => null,
        'hour_end_execution' => null,
        'n_people' => null,
        'comment' => null,
        'notify' => 'int'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_execution' => 'date_execution',
        'hour_execution' => 'hour_execution',
        'hour_end_execution' => 'hour_end_execution',
        'n_people' => 'n_people',
        'comment' => 'comment',
        'notify' => 'notify'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_execution' => 'setDateExecution',
        'hour_execution' => 'setHourExecution',
        'hour_end_execution' => 'setHourEndExecution',
        'n_people' => 'setNPeople',
        'comment' => 'setComment',
        'notify' => 'setNotify'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_execution' => 'getDateExecution',
        'hour_execution' => 'getHourExecution',
        'hour_end_execution' => 'getHourEndExecution',
        'n_people' => 'getNPeople',
        'comment' => 'getComment',
        'notify' => 'getNotify'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_execution'] = isset($data['date_execution']) ? $data['date_execution'] : null;
        $this->container['hour_execution'] = isset($data['hour_execution']) ? $data['hour_execution'] : null;
        $this->container['hour_end_execution'] = isset($data['hour_end_execution']) ? $data['hour_end_execution'] : null;
        $this->container['n_people'] = isset($data['n_people']) ? $data['n_people'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['notify'] = isset($data['notify']) ? $data['notify'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_execution
     *
     * @return \Qwenta\Fulleapps\Model\BookingDateExecution
     */
    public function getDateExecution()
    {
        return $this->container['date_execution'];
    }

    /**
     * Sets date_execution
     *
     * @param \Qwenta\Fulleapps\Model\BookingDateExecution $date_execution date_execution
     *
     * @return $this
     */
    public function setDateExecution($date_execution)
    {
        $this->container['date_execution'] = $date_execution;

        return $this;
    }

    /**
     * Gets hour_execution
     *
     * @return \Qwenta\Fulleapps\Model\BookingHourExecution
     */
    public function getHourExecution()
    {
        return $this->container['hour_execution'];
    }

    /**
     * Sets hour_execution
     *
     * @param \Qwenta\Fulleapps\Model\BookingHourExecution $hour_execution hour_execution
     *
     * @return $this
     */
    public function setHourExecution($hour_execution)
    {
        $this->container['hour_execution'] = $hour_execution;

        return $this;
    }

    /**
     * Gets hour_end_execution
     *
     * @return \Qwenta\Fulleapps\Model\BookingHourEndExecution
     */
    public function getHourEndExecution()
    {
        return $this->container['hour_end_execution'];
    }

    /**
     * Sets hour_end_execution
     *
     * @param \Qwenta\Fulleapps\Model\BookingHourEndExecution $hour_end_execution hour_end_execution
     *
     * @return $this
     */
    public function setHourEndExecution($hour_end_execution)
    {
        $this->container['hour_end_execution'] = $hour_end_execution;

        return $this;
    }

    /**
     * Gets n_people
     *
     * @return \Qwenta\Fulleapps\Model\BookingNPeople
     */
    public function getNPeople()
    {
        return $this->container['n_people'];
    }

    /**
     * Sets n_people
     *
     * @param \Qwenta\Fulleapps\Model\BookingNPeople $n_people n_people
     *
     * @return $this
     */
    public function setNPeople($n_people)
    {
        $this->container['n_people'] = $n_people;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return \Qwenta\Fulleapps\Model\BookingComment
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param \Qwenta\Fulleapps\Model\BookingComment $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets notify
     *
     * @return 
     */
    public function getNotify()
    {
        return $this->container['notify'];
    }

    /**
     * Sets notify
     *
     * @param  $notify 1 pour notifier les appareils
     *
     * @return $this
     */
    public function setNotify($notify)
    {
        $this->container['notify'] = $notify;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
