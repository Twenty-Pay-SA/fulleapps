<?php
/**
 * AccountantSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulle API
 *
 * <strong>IMPORTANT !<br/>Les requetes externes vers l'API sont susceptibles d'être interrompues en cas de trafic fort sur le serveur !<br/>  Pour éviter ce genre de contraintes, nous pouvons vous intégrer dans notre programme partenaire et vous définir un identifiant Partner, afin de permettre une disponibilité continue de l'API.<br/>  L'identifiant Partner sera à insérer dans un header 'X-Api-Key' : '%ID_PARTNER%'</strong><br/><br/> Pour utiliser l'API en externe, vous devez utiliser la clé utilisateur unique de votre compte commerçant.<br/> Cette clé est disponible à la demande auprés de votre revendeur.<br/> Une fois la clé obtenue, utilisez celle ci dans un header Authorization afin de récupérer et gérer les données de compte via notre API REST.<br/> Pour utiliser l'API avec votre clé, voici un exemple du header à placer : <br/> 'Authorization' : 'Mutual %CLE_UTILISATEUR%'<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@fulleapps.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Qwenta\Fulleapps\Model;

use \ArrayAccess;
use \Qwenta\Fulleapps\ObjectSerializer;

/**
 * AccountantSetting Class Doc Comment
 *
 * @category Class
 * @description Class AccountantSetting
 * @package  Qwenta\Fulleapps
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountantSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountantSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number_account_plan' => '',
        'code_debit' => '',
        'code_credit' => '',
        'account_till' => '',
        'diary_till' => '',
        'account_waiting' => '',
        'account_waiting_difference' => '',
        'account_ods' => '',
        'account_clients' => '',
        'account_gift_checks' => '',
        'account_providers' => '',
        'account_diff_od' => '',
        'account_sales' => '',
        'payment_means' => '\Qwenta\Fulleapps\Model\AccountantSettingDataModel[]',
        'payment_means_inputs' => '\Qwenta\Fulleapps\Model\AccountantSettingDataModel[]',
        'payment_means_outputs' => '\Qwenta\Fulleapps\Model\AccountantSettingDataModel[]',
        'payment_means_bank_inputs' => '\Qwenta\Fulleapps\Model\AccountantSettingBankModel[]',
        'payment_means_bank_outputs' => '\Qwenta\Fulleapps\Model\AccountantSettingBankModel[]',
        'tax_groupings' => '\Qwenta\Fulleapps\Model\AccountantSettingTaxGroupingModel[]',
        'taxes' => '\Qwenta\Fulleapps\Model\AccountantSettingDataModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number_account_plan' => 'int',
        'code_debit' => 'string',
        'code_credit' => 'string',
        'account_till' => 'string',
        'diary_till' => 'string',
        'account_waiting' => 'string',
        'account_waiting_difference' => 'string',
        'account_ods' => 'string',
        'account_clients' => 'string',
        'account_gift_checks' => 'string',
        'account_providers' => 'string',
        'account_diff_od' => 'string',
        'account_sales' => 'string',
        'payment_means' => null,
        'payment_means_inputs' => null,
        'payment_means_outputs' => null,
        'payment_means_bank_inputs' => null,
        'payment_means_bank_outputs' => null,
        'tax_groupings' => null,
        'taxes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_account_plan' => 'number_account_plan',
        'code_debit' => 'code_debit',
        'code_credit' => 'code_credit',
        'account_till' => 'account_till',
        'diary_till' => 'diary_till',
        'account_waiting' => 'account_waiting',
        'account_waiting_difference' => 'account_waiting_difference',
        'account_ods' => 'account_ods',
        'account_clients' => 'account_clients',
        'account_gift_checks' => 'account_gift_checks',
        'account_providers' => 'account_providers',
        'account_diff_od' => 'account_diff_od',
        'account_sales' => 'account_sales',
        'payment_means' => 'payment_means',
        'payment_means_inputs' => 'payment_means_inputs',
        'payment_means_outputs' => 'payment_means_outputs',
        'payment_means_bank_inputs' => 'payment_means_bank_inputs',
        'payment_means_bank_outputs' => 'payment_means_bank_outputs',
        'tax_groupings' => 'tax_groupings',
        'taxes' => 'taxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_account_plan' => 'setNumberAccountPlan',
        'code_debit' => 'setCodeDebit',
        'code_credit' => 'setCodeCredit',
        'account_till' => 'setAccountTill',
        'diary_till' => 'setDiaryTill',
        'account_waiting' => 'setAccountWaiting',
        'account_waiting_difference' => 'setAccountWaitingDifference',
        'account_ods' => 'setAccountOds',
        'account_clients' => 'setAccountClients',
        'account_gift_checks' => 'setAccountGiftChecks',
        'account_providers' => 'setAccountProviders',
        'account_diff_od' => 'setAccountDiffOd',
        'account_sales' => 'setAccountSales',
        'payment_means' => 'setPaymentMeans',
        'payment_means_inputs' => 'setPaymentMeansInputs',
        'payment_means_outputs' => 'setPaymentMeansOutputs',
        'payment_means_bank_inputs' => 'setPaymentMeansBankInputs',
        'payment_means_bank_outputs' => 'setPaymentMeansBankOutputs',
        'tax_groupings' => 'setTaxGroupings',
        'taxes' => 'setTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_account_plan' => 'getNumberAccountPlan',
        'code_debit' => 'getCodeDebit',
        'code_credit' => 'getCodeCredit',
        'account_till' => 'getAccountTill',
        'diary_till' => 'getDiaryTill',
        'account_waiting' => 'getAccountWaiting',
        'account_waiting_difference' => 'getAccountWaitingDifference',
        'account_ods' => 'getAccountOds',
        'account_clients' => 'getAccountClients',
        'account_gift_checks' => 'getAccountGiftChecks',
        'account_providers' => 'getAccountProviders',
        'account_diff_od' => 'getAccountDiffOd',
        'account_sales' => 'getAccountSales',
        'payment_means' => 'getPaymentMeans',
        'payment_means_inputs' => 'getPaymentMeansInputs',
        'payment_means_outputs' => 'getPaymentMeansOutputs',
        'payment_means_bank_inputs' => 'getPaymentMeansBankInputs',
        'payment_means_bank_outputs' => 'getPaymentMeansBankOutputs',
        'tax_groupings' => 'getTaxGroupings',
        'taxes' => 'getTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_account_plan'] = isset($data['number_account_plan']) ? $data['number_account_plan'] : null;
        $this->container['code_debit'] = isset($data['code_debit']) ? $data['code_debit'] : null;
        $this->container['code_credit'] = isset($data['code_credit']) ? $data['code_credit'] : null;
        $this->container['account_till'] = isset($data['account_till']) ? $data['account_till'] : null;
        $this->container['diary_till'] = isset($data['diary_till']) ? $data['diary_till'] : null;
        $this->container['account_waiting'] = isset($data['account_waiting']) ? $data['account_waiting'] : null;
        $this->container['account_waiting_difference'] = isset($data['account_waiting_difference']) ? $data['account_waiting_difference'] : null;
        $this->container['account_ods'] = isset($data['account_ods']) ? $data['account_ods'] : null;
        $this->container['account_clients'] = isset($data['account_clients']) ? $data['account_clients'] : null;
        $this->container['account_gift_checks'] = isset($data['account_gift_checks']) ? $data['account_gift_checks'] : null;
        $this->container['account_providers'] = isset($data['account_providers']) ? $data['account_providers'] : null;
        $this->container['account_diff_od'] = isset($data['account_diff_od']) ? $data['account_diff_od'] : null;
        $this->container['account_sales'] = isset($data['account_sales']) ? $data['account_sales'] : null;
        $this->container['payment_means'] = isset($data['payment_means']) ? $data['payment_means'] : null;
        $this->container['payment_means_inputs'] = isset($data['payment_means_inputs']) ? $data['payment_means_inputs'] : null;
        $this->container['payment_means_outputs'] = isset($data['payment_means_outputs']) ? $data['payment_means_outputs'] : null;
        $this->container['payment_means_bank_inputs'] = isset($data['payment_means_bank_inputs']) ? $data['payment_means_bank_inputs'] : null;
        $this->container['payment_means_bank_outputs'] = isset($data['payment_means_bank_outputs']) ? $data['payment_means_bank_outputs'] : null;
        $this->container['tax_groupings'] = isset($data['tax_groupings']) ? $data['tax_groupings'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_account_plan
     *
     * @return 
     */
    public function getNumberAccountPlan()
    {
        return $this->container['number_account_plan'];
    }

    /**
     * Sets number_account_plan
     *
     * @param  $number_account_plan Nombre de chiffres du plan comptable (4 à 10 chiffres)
     *
     * @return $this
     */
    public function setNumberAccountPlan($number_account_plan)
    {
        $this->container['number_account_plan'] = $number_account_plan;

        return $this;
    }

    /**
     * Gets code_debit
     *
     * @return 
     */
    public function getCodeDebit()
    {
        return $this->container['code_debit'];
    }

    /**
     * Sets code_debit
     *
     * @param  $code_debit Code écriture au débit
     *
     * @return $this
     */
    public function setCodeDebit($code_debit)
    {
        $this->container['code_debit'] = $code_debit;

        return $this;
    }

    /**
     * Gets code_credit
     *
     * @return 
     */
    public function getCodeCredit()
    {
        return $this->container['code_credit'];
    }

    /**
     * Sets code_credit
     *
     * @param  $code_credit Code écriture au crédit
     *
     * @return $this
     */
    public function setCodeCredit($code_credit)
    {
        $this->container['code_credit'] = $code_credit;

        return $this;
    }

    /**
     * Gets account_till
     *
     * @return 
     */
    public function getAccountTill()
    {
        return $this->container['account_till'];
    }

    /**
     * Sets account_till
     *
     * @param  $account_till N° compte caisse
     *
     * @return $this
     */
    public function setAccountTill($account_till)
    {
        $this->container['account_till'] = $account_till;

        return $this;
    }

    /**
     * Gets diary_till
     *
     * @return 
     */
    public function getDiaryTill()
    {
        return $this->container['diary_till'];
    }

    /**
     * Sets diary_till
     *
     * @param  $diary_till N° journal de caisse
     *
     * @return $this
     */
    public function setDiaryTill($diary_till)
    {
        $this->container['diary_till'] = $diary_till;

        return $this;
    }

    /**
     * Gets account_waiting
     *
     * @return 
     */
    public function getAccountWaiting()
    {
        return $this->container['account_waiting'];
    }

    /**
     * Sets account_waiting
     *
     * @param  $account_waiting Compte d'attente
     *
     * @return $this
     */
    public function setAccountWaiting($account_waiting)
    {
        $this->container['account_waiting'] = $account_waiting;

        return $this;
    }

    /**
     * Gets account_waiting_difference
     *
     * @return 
     */
    public function getAccountWaitingDifference()
    {
        return $this->container['account_waiting_difference'];
    }

    /**
     * Sets account_waiting_difference
     *
     * @param  $account_waiting_difference Compte d'attente d'écarts de caisse
     *
     * @return $this
     */
    public function setAccountWaitingDifference($account_waiting_difference)
    {
        $this->container['account_waiting_difference'] = $account_waiting_difference;

        return $this;
    }

    /**
     * Gets account_ods
     *
     * @return 
     */
    public function getAccountOds()
    {
        return $this->container['account_ods'];
    }

    /**
     * Sets account_ods
     *
     * @param  $account_ods Code journal des opérations diverses
     *
     * @return $this
     */
    public function setAccountOds($account_ods)
    {
        $this->container['account_ods'] = $account_ods;

        return $this;
    }

    /**
     * Gets account_clients
     *
     * @return 
     */
    public function getAccountClients()
    {
        return $this->container['account_clients'];
    }

    /**
     * Sets account_clients
     *
     * @param  $account_clients N° de compte des clients divers
     *
     * @return $this
     */
    public function setAccountClients($account_clients)
    {
        $this->container['account_clients'] = $account_clients;

        return $this;
    }

    /**
     * Gets account_gift_checks
     *
     * @return 
     */
    public function getAccountGiftChecks()
    {
        return $this->container['account_gift_checks'];
    }

    /**
     * Sets account_gift_checks
     *
     * @param  $account_gift_checks N° de compte des cheques cadeaux
     *
     * @return $this
     */
    public function setAccountGiftChecks($account_gift_checks)
    {
        $this->container['account_gift_checks'] = $account_gift_checks;

        return $this;
    }

    /**
     * Gets account_providers
     *
     * @return 
     */
    public function getAccountProviders()
    {
        return $this->container['account_providers'];
    }

    /**
     * Sets account_providers
     *
     * @param  $account_providers N° de compte des fournisseurs divers
     *
     * @return $this
     */
    public function setAccountProviders($account_providers)
    {
        $this->container['account_providers'] = $account_providers;

        return $this;
    }

    /**
     * Gets account_diff_od
     *
     * @return 
     */
    public function getAccountDiffOd()
    {
        return $this->container['account_diff_od'];
    }

    /**
     * Sets account_diff_od
     *
     * @param  $account_diff_od N° de compte des différences d'opérations diverses
     *
     * @return $this
     */
    public function setAccountDiffOd($account_diff_od)
    {
        $this->container['account_diff_od'] = $account_diff_od;

        return $this;
    }

    /**
     * Gets account_sales
     *
     * @return 
     */
    public function getAccountSales()
    {
        return $this->container['account_sales'];
    }

    /**
     * Sets account_sales
     *
     * @param  $account_sales Code journal des ventes
     *
     * @return $this
     */
    public function setAccountSales($account_sales)
    {
        $this->container['account_sales'] = $account_sales;

        return $this;
    }

    /**
     * Gets payment_means
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingDataModel[]
     */
    public function getPaymentMeans()
    {
        return $this->container['payment_means'];
    }

    /**
     * Sets payment_means
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingDataModel[] $payment_means N° de comptes des encaissements / avoirs
     *
     * @return $this
     */
    public function setPaymentMeans($payment_means)
    {
        $this->container['payment_means'] = $payment_means;

        return $this;
    }

    /**
     * Gets payment_means_inputs
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingDataModel[]
     */
    public function getPaymentMeansInputs()
    {
        return $this->container['payment_means_inputs'];
    }

    /**
     * Sets payment_means_inputs
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingDataModel[] $payment_means_inputs N° de comptes des entrées de caisse diverses
     *
     * @return $this
     */
    public function setPaymentMeansInputs($payment_means_inputs)
    {
        $this->container['payment_means_inputs'] = $payment_means_inputs;

        return $this;
    }

    /**
     * Gets payment_means_outputs
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingDataModel[]
     */
    public function getPaymentMeansOutputs()
    {
        return $this->container['payment_means_outputs'];
    }

    /**
     * Sets payment_means_outputs
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingDataModel[] $payment_means_outputs N° de comptes des sorties de caisse diverses
     *
     * @return $this
     */
    public function setPaymentMeansOutputs($payment_means_outputs)
    {
        $this->container['payment_means_outputs'] = $payment_means_outputs;

        return $this;
    }

    /**
     * Gets payment_means_bank_inputs
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingBankModel[]
     */
    public function getPaymentMeansBankInputs()
    {
        return $this->container['payment_means_bank_inputs'];
    }

    /**
     * Sets payment_means_bank_inputs
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingBankModel[] $payment_means_bank_inputs N° de comptes des entrées de caisse depuis une banque
     *
     * @return $this
     */
    public function setPaymentMeansBankInputs($payment_means_bank_inputs)
    {
        $this->container['payment_means_bank_inputs'] = $payment_means_bank_inputs;

        return $this;
    }

    /**
     * Gets payment_means_bank_outputs
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingBankModel[]
     */
    public function getPaymentMeansBankOutputs()
    {
        return $this->container['payment_means_bank_outputs'];
    }

    /**
     * Sets payment_means_bank_outputs
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingBankModel[] $payment_means_bank_outputs N° de comptes des sorties de caisse depuis une banque
     *
     * @return $this
     */
    public function setPaymentMeansBankOutputs($payment_means_bank_outputs)
    {
        $this->container['payment_means_bank_outputs'] = $payment_means_bank_outputs;

        return $this;
    }

    /**
     * Gets tax_groupings
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingTaxGroupingModel[]
     */
    public function getTaxGroupings()
    {
        return $this->container['tax_groupings'];
    }

    /**
     * Sets tax_groupings
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingTaxGroupingModel[] $tax_groupings N° de comptes des regroupements de taxes
     *
     * @return $this
     */
    public function setTaxGroupings($tax_groupings)
    {
        $this->container['tax_groupings'] = $tax_groupings;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \Qwenta\Fulleapps\Model\AccountantSettingDataModel[]
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \Qwenta\Fulleapps\Model\AccountantSettingDataModel[] $taxes N° de comptes des taxes
     *
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
